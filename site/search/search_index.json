{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ProjectHub Documentation","text":"<p>Language Support</p> <p>This documentation is available in other languages including French via browser translate utility.</p>"},{"location":"#quick-access","title":"Quick Access","text":"DocumentationTechnicalManagement <ul> <li>Project Objectives</li> <li>System Architecture </li> <li>Risk Management</li> <li>Resource Management</li> </ul> <ul> <li>App Settings</li> <li>Dashboard</li> <li>Team Flow</li> </ul> <ul> <li>Project Management</li> <li>Task Management</li> <li>Resource Management</li> </ul>"},{"location":"#core-documents","title":"Core Documents","text":"<p>External Resources</p> <ul> <li>Cahier des Charges (fr)</li> <li>Specifications (fr)</li> <li>Project README</li> </ul>"},{"location":"#features-overview","title":"Features Overview","text":"<ul> <li> User Management</li> <li> Project Management  </li> <li> Task Tracking</li> <li> Resource Planning</li> <li> System Configuration</li> <li> Analytics Dashboard</li> </ul> <p>Getting Started</p> <p>New to ProjectHub? Start with our Introduction guide.</p>"},{"location":"pages/docs/flow/appsettings-management/","title":"App Settings","text":"Settings Management - ProjectHub UI Components Layout |  Settings Flow Diagram |  Data Dictionary |  Go Back UI Components Layout <p>This diagram illustrates the layout of the UI components within the settings management interface.</p>   graph TD  %% Main Components  Root[BorderPane: Root]  Content[ScrollPane: Content]  Actions[HBox: Actions]    %% Settings Sections  ThemeSection[VBox: ThemeSection]  LangSection[VBox: LanguageSection]  NotifSection[VBox: NotificationSection]  AccountSection[VBox: AccountSection]    %% Controls  ThemeSelector[ComboBox: ThemeSelector]  LangSelector[ComboBox: LanguageSelector]  EmailToggle[CheckBox: EmailNotifications]  PushToggle[CheckBox: PushNotifications]  PasswordBtn[Button: ChangePassword]  LogoutBtn[Button: Logout]  SaveBtn[Button: SaveSettings]    %% Hierarchy  Root --&gt; Content  Root --&gt; Actions  Content --&gt; ThemeSection  Content --&gt; LangSection  Content --&gt; NotifSection  Content --&gt; AccountSection    %% Section Details  ThemeSection --&gt; ThemeSelector  LangSection --&gt; LangSelector  NotifSection --&gt; EmailToggle  NotifSection --&gt; PushToggle  AccountSection --&gt; PasswordBtn  AccountSection --&gt; LogoutBtn  Actions --&gt; SaveBtn    %% Styling  classDef container fill:#e1f5fe,stroke:#01579b  classDef section fill:#fff,stroke:#0288d1  classDef control fill:#e8f5e9,stroke:#2e7d32    class Root,Content container  class ThemeSection,LangSection,NotifSection,AccountSection section  class ThemeSelector,LangSelector,EmailToggle,PushToggle,PasswordBtn,LogoutBtn,SaveBtn control   Settings Management Flow <p>This sequence diagram shows the flow of interactions when a user manages their settings, including theme and language changes.</p>   sequenceDiagram  actor User  participant View as SettingsView  participant Controller as SettingsController  participant ThemeService  participant LangService as LanguageService  participant Store as SettingsStore    Note over User,View: User Opens Settings  User-&gt;&gt;View: Open Settings  View-&gt;&gt;Controller: initialize()  Controller-&gt;&gt;ThemeService: getCurrentTheme()  Controller-&gt;&gt;LangService: getCurrentLocale()  Controller-&gt;&gt;View: populateSettings()    Note over User,Store: Settings Modification  User-&gt;&gt;View: Change Theme  View-&gt;&gt;Controller: handleThemeChange()  Controller-&gt;&gt;ThemeService: setTheme()  ThemeService-&gt;&gt;Store: saveTheme()    User-&gt;&gt;View: Change Language  View-&gt;&gt;Controller: handleLanguageChange()  Controller-&gt;&gt;LangService: setLocale()  LangService-&gt;&gt;Store: saveLocale()  LangService--&gt;&gt;View: refreshUI()    Note over User,View: Save Changes  User-&gt;&gt;View: Click Save  View-&gt;&gt;Controller: handleSave()  Controller-&gt;&gt;Store: persistSettings()  Store--&gt;&gt;Controller: success  Controller--&gt;&gt;View: showSuccess()"},{"location":"pages/docs/flow/appsettings-management/#appsettings-management-title","title":"Settings Management","text":"<p>Documentation for ProjectHub's settings management system, covering theme customization, language selection, and notification preferences.</p>"},{"location":"pages/docs/flow/appsettings-management/#data-dictionary","title":"Components DictionarySettings Properties","text":"<p>This table provides a description of the main components involved in the settings management system.</p> Component Type Description SettingsViewController Controller Manages settings view interactions and updates ThemeService Service Handles theme switching and persistence LanguageService Service Manages localization and language switching SettingsStore Storage Persists user settings preferences <p>This table lists the properties that can be configured within the settings management system.</p> Property Type Description theme String Current UI theme (Light/Dark) locale Locale Current language setting emailNotifications boolean Email notifications enabled state"},{"location":"pages/docs/flow/appsettings-management/#error-handling","title":"Error Handling","text":"<p>This section outlines the error handling mechanisms in place for the settings management system.</p> <ul> <li>Theme switching failures trigger fallback to default theme</li> <li>Language changes preserve current UI state</li> <li>Settings persistence failures show user notifications</li> <li>Invalid configurations trigger validation alerts</li> </ul>"},{"location":"pages/docs/flow/appstart-management/","title":"App Start","text":"Application Startup Management - ProjectHub UI Component Hierarchy |  Startup Sequence Diagram |  Data Dictionary |  Go Back UI Component Hierarchy   graph TD  %% Main Components  Root[BorderPane: Root]  Stage[Stage: MainStage]  Scene[Scene: MainScene]  Resources[ResourceBundle]  Styles[StylesheetManager]  %% View Components  NavDrawer[VBox: NavigationDrawer]  AppBar[HBox: AppBar]  Content[StackPane: Content]  StatusBar[HBox: StatusBar]  %% Hierarchy  Stage --&gt; Scene  Scene --&gt; Root  Root --&gt; Resources  Root --&gt; Styles  Root --&gt; NavDrawer  Root --&gt; AppBar  Root --&gt; Content  Root --&gt; StatusBar  %% Resource Management  Resources --&gt; Messages[i18n.messages]  Resources --&gt; Config[app.config]  Styles --&gt; Theme[theme.css]  %% Styling  classDef container fill:#e1f5fe,stroke:#01579b  classDef component fill:#fff,stroke:#0288d1  classDef resource fill:#e8f5e9,stroke:#2e7d32  class Stage,Scene,Root container  class NavDrawer,AppBar,Content,StatusBar component  class Resources,Styles,Messages,Config,Theme resource   Application Startup Sequence   sequenceDiagram  participant App as MainApp  participant Stage as MainStage  participant View as MainView  participant Controller as MainViewController  participant Resources as ResourceBundle  participant CSS as StylesheetManager    Note over App,Resources: Application Startup Phase  App-&gt;&gt;Resources: getBundle(\"i18n.messages\")  Resources--&gt;&gt;App: ResourceBundle    Note over App,Stage: View Initialization  App-&gt;&gt;Stage: new Stage()  App-&gt;&gt;View: loadMainView()  View-&gt;&gt;Controller: initialize()    par Resource Loading  Controller-&gt;&gt;Resources: loadMessages()  Resources--&gt;&gt;Controller: i18n strings  Controller-&gt;&gt;CSS: loadStyles()  CSS--&gt;&gt;Controller: stylesheets  end    Note over Controller: View Setup  Controller-&gt;&gt;Controller: setupNavigation()  Controller-&gt;&gt;Controller: setupAppBar()  Controller-&gt;&gt;Controller: initializeContent()    Note over App,Stage: Display  App-&gt;&gt;Stage: setScene()  App-&gt;&gt;Stage: show()  Stage--&gt;&gt;App: viewReady    Note over App: Error Handling  alt Loading Error  App-&gt;&gt;App: logError()  App-&gt;&gt;Stage: showErrorDialog()  end"},{"location":"pages/docs/flow/appstart-management/#appstart-management-title","title":"Application Startup Management","text":"<p>Documentation for ProjectHub's application startup process, detailing initialization sequences, resource loading, and view setup procedures.</p>"},{"location":"pages/docs/flow/appstart-management/#data-dictionary","title":"Data Dictionary","text":"<p>Key components and their responsibilities in the application startup process.</p> Core Components Component Type Description MainApp Application Main application class that initiates the startup sequence. MainView FXML View Root view container for the application UI. MainViewController Controller Controls main view behavior and navigation. ResourceBundle Resource Manager Manages internationalization resources. StylesheetManager Style Manager Handles application styling and themes. Configuration Properties Property Type Description i18n.messages Properties Internationalization string resources. app.config Properties Application configuration settings. theme.css Stylesheet Custom application styling."},{"location":"pages/docs/flow/appstart-management/#process-explanation","title":"Startup Process Explanation","text":"<ul> <li>Resource Loading: Initializes application resources including internationalization bundles and configuration properties.</li> <li>View Initialization: Loads the main FXML view and establishes controller bindings.</li> <li>Style Application: Applies both Gluon framework styles and custom application themes.</li> <li>Error Handling: Implements graceful error handling during startup with user notifications.</li> <li>Navigation Setup: Configures the navigation drawer and main content area for the application.</li> </ul>"},{"location":"pages/docs/flow/cohort-management/","title":"Cohort Flow","text":"Cohort Management - Data Dictionary and Sequence Diagram UI Component Hierarchy   graph TD  %% Main Components  Root[BorderPane: Root]  Content[SplitPane: Content]  List[VBox: CohortList]  Details[ScrollPane: Details]    %% List Components  SearchBar[TextField: Search]  CohortTable[TableView: Cohorts]  AddButton[Button: AddCohort]    %% Details Components  CohortForm[Form: CohortForm]  NameField[TextField: Name]  DatePicker[DatePicker: Dates]  TeamList[ListView: Teams]    %% Action Components  Actions[HBox: Actions]  SaveBtn[Button: Save]  DeleteBtn[Button: Delete]    %% Dialog Components  DialogPane[DialogPane: Confirmation]  DialogBtns[ButtonBar: DialogButtons]    %% Hierarchy  Root --&gt; Content  Content --&gt; List  Content --&gt; Details    List --&gt; SearchBar  List --&gt; CohortTable  List --&gt; AddButton    Details --&gt; CohortForm  CohortForm --&gt; NameField  CohortForm --&gt; DatePicker  CohortForm --&gt; TeamList  Details --&gt; Actions    Actions --&gt; SaveBtn  Actions --&gt; DeleteBtn    Root --&gt; DialogPane  DialogPane --&gt; DialogBtns    %% Styling  classDef container fill:#e1f5fe,stroke:#01579b  classDef component fill:#fff,stroke:#0288d1  classDef control fill:#e8f5e9,stroke:#2e7d32    class Root,Content container  class List,Details,CohortForm,DialogPane component  class SearchBar,CohortTable,NameField,DatePicker,TeamList,SaveBtn,DeleteBtn,DialogBtns control   Sequence Diagram <p>  The following sequence diagram illustrates the interactions between the user interface, view models,  services, and the database during cohort management operations.  </p>   sequenceDiagram  actor User  participant UI as User Interface  participant ViewModel as CohortViewModel  participant Service as CohortService  participant Database as Database  participant Notification as NotificationSystem    %% Main Navigation  User-&gt;&gt;UI: Navigate to Cohorts  UI-&gt;&gt;ViewModel: Load Cohort List  ViewModel-&gt;&gt;Service: Fetch Cohorts  Service-&gt;&gt;Database: Retrieve Cohorts  Database--&gt;&gt;Service: Provide Cohort Data  Service--&gt;&gt;ViewModel: Return Cohorts  ViewModel--&gt;&gt;UI: Display Cohort List    %% Create Cohort  User-&gt;&gt;UI: Add New Cohort  UI-&gt;&gt;ViewModel: Initialize New Cohort Form  User-&gt;&gt;UI: Enter Cohort Details  UI-&gt;&gt;ViewModel: Submit New Cohort  ViewModel-&gt;&gt;Service: Save Cohort  Service-&gt;&gt;Database: Persist Cohort  Database--&gt;&gt;Service: Confirmation  Service--&gt;&gt;ViewModel: Cohort Saved  ViewModel--&gt;&gt;UI: Update Cohort List  UI-&gt;&gt;Notification: Show Success Message    %% Edit Cohort  User-&gt;&gt;UI: Select Cohort to Edit  UI-&gt;&gt;ViewModel: Load Cohort Details  ViewModel-&gt;&gt;Service: Fetch Cohort by ID  Service-&gt;&gt;Database: Retrieve Cohort Data  Database--&gt;&gt;Service: Provide Cohort Details  Service--&gt;&gt;ViewModel: Return Cohort Data  ViewModel--&gt;&gt;UI: Populate Edit Form  User-&gt;&gt;UI: Modify Cohort Details  UI-&gt;&gt;ViewModel: Submit Changes  ViewModel-&gt;&gt;Service: Update Cohort  Service-&gt;&gt;Database: Update Cohort Record  Database--&gt;&gt;Service: Confirmation  Service--&gt;&gt;ViewModel: Cohort Updated  ViewModel--&gt;&gt;UI: Refresh Cohort List  UI-&gt;&gt;Notification: Show Update Success    %% Delete Cohort  User-&gt;&gt;UI: Delete Cohort  UI-&gt;&gt;ViewModel: Confirm Deletion  ViewModel-&gt;&gt;Service: Remove Cohort  Service-&gt;&gt;Database: Delete Cohort Record  Database--&gt;&gt;Service: Confirmation  Service--&gt;&gt;ViewModel: Cohort Deleted  ViewModel--&gt;&gt;UI: Update Cohort List  UI-&gt;&gt;Notification: Show Deletion Success    %% Navigation Guard  User-&gt;&gt;UI: Attempt to Navigate Away  UI-&gt;&gt;ViewModel: Check for Unsaved Changes  alt Unsaved Changes Present  ViewModel-&gt;&gt;UI: Prompt to Save or Discard  User-&gt;&gt;UI: Choose to Discard  UI-&gt;&gt;ViewModel: Proceed with Navigation  else No Unsaved Changes  UI-&gt;&gt;ViewModel: Proceed with Navigation  end"},{"location":"pages/docs/flow/cohort-management/#cohort-management-title","title":"Cohort Management","text":"<p>This documentation provides a comprehensive overview of the Cohort Management module, including data models, user interfaces, and operational workflows.</p>"},{"location":"pages/docs/flow/cohort-management/#data-dictionary","title":"Data Dictionary","text":"<p>  The Data Dictionary below outlines the key data entities used within the Cohort Management module, detailing  their attributes, types, and descriptions.  </p> User Attribute Type Description UserID UUID Unique identifier for the user. Username String Name of the user. Role Enum Role of the user (e.g., Admin, Manager). Cohort Attribute Type Description id UUID Unique identifier for the cohort. name String Name of the cohort. description String Description of the cohort. startDate Date Start date of the cohort. endDate Date End date of the cohort. teams List&lt;Team&gt; List of teams associated with the cohort. Team Attribute Type Description teamId UUID Unique identifier for the team. teamName String Name of the team. members List&lt;User&gt; List of team members. Dialog Attribute Type Description dialogType Enum Type of dialog (e.g., Confirmation, Warning). message String The content displayed in the dialog. userResponse Enum User's response to the dialog (e.g., Confirm, Cancel)."},{"location":"pages/docs/flow/cohort-management/#explanation-section","title":"Explanation","text":"<ul> <li>Main Navigation: Users navigate to the Cohort Management interface and load the list of  cohorts.</li> <li>Create Cohort: Describes the process of adding a new cohort, from initializing the form  to saving the cohort and updating the UI.</li> <li>Edit Cohort: Details how users can select and modify existing cohorts, including  loading details, submitting changes, and refreshing the cohort list.</li> <li>Delete Cohort: Explains the steps involved in removing a cohort, including confirmation  and updating the UI.</li> <li>Navigation Guard: Discusses how the system handles attempts to navigate away with  unsaved changes, prompting the user to save or discard.</li> </ul>"},{"location":"pages/docs/flow/component-management/","title":"Component Flow","text":"Component Management - Data Dictionary and Sequence Diagram UI Component Hierarchy   graph TD  %% Main Components  Root[BorderPane: Root]  Content[ScrollPane: Content]  Details[VBox: Details]  Actions[HBox: Actions]    %% Form Components  ComponentForm[Form: ComponentForm]  NameField[TextField: Name]  DescField[TextArea: Description]  ProjectSelect[ComboBox: Project]    %% Action Components  SaveBtn[Button: Save]  DeleteBtn[Button: Delete]  CancelBtn[Button: Cancel]    %% Status Components  StatusBar[HBox: StatusBar]  ProgressIndicator[ProgressBar]  StatusLabel[Label: Status]    %% Hierarchy  Root --&gt; Content  Content --&gt; Details  Details --&gt; ComponentForm  Details --&gt; Actions  Details --&gt; StatusBar    ComponentForm --&gt; NameField  ComponentForm --&gt; DescField  ComponentForm --&gt; ProjectSelect    Actions --&gt; SaveBtn  Actions --&gt; DeleteBtn  Actions --&gt; CancelBtn    StatusBar --&gt; ProgressIndicator  StatusBar --&gt; StatusLabel    %% Styling  classDef container fill:#e1f5fe,stroke:#01579b  classDef component fill:#fff,stroke:#0288d1  classDef control fill:#e8f5e9,stroke:#2e7d32    class Root,Content,Details container  class ComponentForm,Actions,StatusBar component  class NameField,DescField,ProjectSelect,SaveBtn,DeleteBtn,CancelBtn,ProgressIndicator,StatusLabel control   Sequence Diagram <p>  The following sequence diagram illustrates the interactions between the user interface, controllers, view  models, services, and the database during component management operations.  </p>   sequenceDiagram  actor User  participant UI as Component Details UI  participant Controller as ComponentDetailsController  participant ViewModel as ComponentDetailsViewModel  participant Service as ComponentService  participant Database as Database  participant Notification as Notification System    %% View Component  User-&gt;&gt;UI: View Component Details  UI-&gt;&gt;Controller: initialize()  Controller-&gt;&gt;ViewModel: Bind Properties  Note right of Controller: Binds UI controls to ViewModel properties    %% Create/Edit Flow  User-&gt;&gt;UI: Enter Component Details  UI-&gt;&gt;Controller: saveComponent(event)  Controller-&gt;&gt;Controller: Validate Input  Note right of Controller: Check componentName and projectId    alt Invalid Input  Controller--&gt;&gt;UI: Show Validation Error  else Valid Input  Controller-&gt;&gt;ViewModel: saveComponent(componentDTO)  ViewModel-&gt;&gt;Service: saveComponent() / updateComponent()  Service-&gt;&gt;Database: Persist Changes  Database--&gt;&gt;Service: Return Result  Service--&gt;&gt;ViewModel: Return Saved Component  ViewModel--&gt;&gt;Controller: Update UI  Controller--&gt;&gt;UI: Show Success Message  end    %% Delete Flow  User-&gt;&gt;UI: Click Delete  UI-&gt;&gt;Controller: deleteComponent(event)  Controller-&gt;&gt;ViewModel: deleteComponent(id)  ViewModel-&gt;&gt;Service: deleteComponent()  Service-&gt;&gt;Database: Delete Record  Database--&gt;&gt;Service: Confirm Deletion  Service--&gt;&gt;ViewModel: Return Success  ViewModel--&gt;&gt;Controller: clearComponent()  Controller--&gt;&gt;UI: Update UI State    %% Error Handling  alt Error Occurs  Service--&gt;&gt;ViewModel: Throw Exception  ViewModel--&gt;&gt;Controller: Log Error  Controller--&gt;&gt;UI: Show Error Dialog  end"},{"location":"pages/docs/flow/component-management/#component-management-title","title":"Component Management","text":"<p>This documentation provides a comprehensive overview of the Component Management module, including data structures, user interface components, and interaction flows.</p>"},{"location":"pages/docs/flow/component-management/#data-dictionary","title":"Data Dictionary","text":"<p>  The Data Dictionary below outlines the key data entities used within the Component Management module,  detailing their attributes, types, and descriptions.  </p> Component Attribute Type Description componentId UUID Unique identifier for the component. componentName String Name of the component. componentDescription String Detailed description of the component. projectId UUID Reference to the parent project."},{"location":"pages/docs/flow/component-management/#explanation-section","title":"Explanation","text":"<p>  This sequence diagram captures the lifecycle of a component within the system, detailing how user actions  propagate through the UI, controllers, view models, services, and the database. It ensures that each step,  from viewing to deleting a component, is clearly defined and handled.  </p> <ul> <li>View Component: The user initiates a request to view component details, triggering the  initialization and property binding processes.</li> <li>Create/Edit Flow: Allows users to add or modify component details, incorporating  validation before persisting changes.</li> <li>Delete Flow: Facilitates the removal of a component, ensuring confirmation and proper  state updates post-deletion.</li> <li>Error Handling: Manages exceptions gracefully by logging errors and notifying the user.  </li> </ul>"},{"location":"pages/docs/flow/dashboard-management/","title":"Dashboard","text":"Dashboard Management - Data Dictionary and Sequence Diagram UI Component Hierarchy |  Sequence Diagram |  Data Dictionary |  Go Back Explanation <ul> <li>Dashboard Initialization: Loads and configures UI components, ensuring all elements are  bound to the ViewModel.</li> <li>Parallel Data Loading: Efficiently retrieves statistics, charts, and recent activities  concurrently to optimize performance.</li> <li>Real-time Updates: Maintains dashboard freshness by periodically polling the database  for updates every 30 seconds.</li> <li>Error Handling: Manages exceptions gracefully by logging errors and notifying the user  through dialog boxes.</li> </ul>"},{"location":"pages/docs/flow/dashboard-management/#dashboard-management-title","title":"Dashboard Management","text":"<p>This section covers the dashboard management functionalities, including data visualization, user interactions, and performance metrics.</p>"},{"location":"pages/docs/flow/dashboard-management/#ui-component-hierarchy","title":"UI Component Hierarchy","text":"graph TD  %% Main Components  Root[BorderPane: Root]  Content[ScrollPane: Content]  Stats[HBox: Statistics]  Charts[VBox: Charts]  Activities[VBox: Activities]    %% Statistics Components  UsersCard[VBox: UsersStats]  ProjectsCard[VBox: ProjectStats]  TeamsCard[VBox: TeamStats]    %% Chart Components  PieChart[PieChart: StatusDistribution]  LineChart[LineChart: ActivityTrend]    %% Activity Components  ActivityTable[TableView: RecentActivities]  ActivityFilter[ComboBox: Filter]  RefreshBtn[Button: Refresh]    %% Hierarchy  Root --&gt; Content  Content --&gt; Stats  Content --&gt; Charts  Content --&gt; Activities    Stats --&gt; UsersCard  Stats --&gt; ProjectsCard  Stats --&gt; TeamsCard    Charts --&gt; PieChart  Charts --&gt; LineChart    Activities --&gt; ActivityFilter  Activities --&gt; ActivityTable  Activities --&gt; RefreshBtn    %% Styling  classDef container fill:#e1f5fe,stroke:#01579b  classDef component fill:#fff,stroke:#0288d1  classDef control fill:#e8f5e9,stroke:#2e7d32    class Root,Content container  class Stats,Charts,Activities component  class UsersCard,ProjectsCard,TeamsCard,PieChart,LineChart,ActivityTable control"},{"location":"pages/docs/flow/dashboard-management/#sequence-diagram","title":"Sequence Diagram","text":"<p>  The following sequence diagram illustrates the interactions between the user interface, controllers, view  models, services, and the database during dashboard management operations.  </p>   sequenceDiagram  actor User  participant UI as Dashboard View  participant Controller as DashboardController  participant ViewModel as DashboardViewModel  participant Service as DashboardService  participant Database as Database  participant Notification as Notification System    %% Initialize Dashboard  User-&gt;&gt;UI: Open Dashboard  UI-&gt;&gt;Controller: initialize()  Controller-&gt;&gt;Controller: bindProperties()  Note right of Controller: Bind UI controls to ViewModel properties  Controller-&gt;&gt;Controller: setupRecentActivitiesTable()  Note right of Controller: Configure table columns and cell factories    %% Load Dashboard Data  Controller-&gt;&gt;ViewModel: loadDashboardData()  par Load Statistics  ViewModel-&gt;&gt;Service: getTotalUsers()  Service-&gt;&gt;Database: Query Users Count  Database--&gt;&gt;Service: Return Count  Service--&gt;&gt;ViewModel: Update totalUsers  and  ViewModel-&gt;&gt;Service: getTotalProjects()  Service-&gt;&gt;Database: Query Projects Count  Database--&gt;&gt;Service: Return Count  Service--&gt;&gt;ViewModel: Update totalProjects  and  ViewModel-&gt;&gt;Service: getTotalTeams()  Service-&gt;&gt;Database: Query Teams Count  Database--&gt;&gt;Service: Return Count  Service--&gt;&gt;ViewModel: Update totalTeams  end    %% Load Charts and Activities  par Load Project Status  ViewModel-&gt;&gt;Service: getProjectStatusDistribution()  Service-&gt;&gt;Database: Query Status Data  Database--&gt;&gt;Service: Return Statistics  Service--&gt;&gt;ViewModel: Update pieChart data  and Load Activities  ViewModel-&gt;&gt;Service: getRecentActivities()  Service-&gt;&gt;Database: Query Activities  Database--&gt;&gt;Service: Return Activities  Service--&gt;&gt;ViewModel: Update activities list  end    %% Update UI  ViewModel--&gt;&gt;Controller: Properties Updated  Controller--&gt;&gt;UI: Refresh Display  Note right of UI: Update statistics cards, charts, and table    %% Real-time Updates  loop Every 30 seconds  Service-&gt;&gt;Database: Poll for Changes  Database--&gt;&gt;Service: Return Updates  Service--&gt;&gt;ViewModel: Update Properties  ViewModel--&gt;&gt;UI: Refresh Display  end    %% Error Handling  alt Error Occurs  Service--&gt;&gt;ViewModel: Throw Exception  ViewModel--&gt;&gt;Controller: Log Error  Controller--&gt;&gt;UI: Show Error Dialog  end"},{"location":"pages/docs/flow/dashboard-management/#data-dictionary","title":"Data Dictionary","text":"<p>  The Data Dictionary below outlines the key data entities used within the Dashboard Management module,  detailing their attributes, types, and descriptions.  </p> DashboardStatistics Attribute Type Description totalUsers Integer Total number of users in the system. totalProjects Integer Total number of projects. totalTeams Integer Total number of teams. ProjectStatus Attribute Type Description statusType Enum Project status (e.g., In Progress, Completed). count Integer Number of projects in this status. percentage Double Percentage of total projects. RecentActivity Attribute Type Description activityId UUID Unique identifier for the activity. timestamp DateTime When the activity occurred. type Enum Type of activity (e.g., Create, Update, Delete). description String Description of the activity. PieChartData Attribute Type Description category String Category name for the pie chart slice. value Double Numerical value representing the category."},{"location":"pages/docs/flow/loginregister-management/","title":"Login/Register","text":"Login &amp; Register Documentation - ProjectHub UI Component Hierarchy |  Login Sequence Diagram |  Register Sequence Diagram |  Unified Data Dictionary |  Go Back Login Sequence Diagram   sequenceDiagram  %% Actors and Participants  actor User  participant LoginView  participant LoginController  participant LoginViewModel  participant AuthService  participant TokenService  participant DB    %% Login Flow  User-&gt;&gt;LoginView: Enter Credentials  LoginView-&gt;&gt;LoginController: handleLogin()  LoginController-&gt;&gt;LoginViewModel: login()  LoginViewModel-&gt;&gt;LoginViewModel: validateInput()    alt Invalid Input  LoginViewModel--&gt;&gt;LoginController: return false  LoginController--&gt;&gt;LoginView: Show Error  else Valid Input  LoginViewModel-&gt;&gt;AuthService: authenticate(LoginRequestDTO)  AuthService-&gt;&gt;DB: validateCredentials()    alt Authentication Success  DB--&gt;&gt;AuthService: User Found  AuthService--&gt;&gt;LoginViewModel: AuthenticationResultDTO  LoginViewModel-&gt;&gt;TokenService: storeToken()  LoginViewModel--&gt;&gt;LoginController: return true  LoginController--&gt;&gt;LoginView: navigateToMainView()  else Authentication Failed  DB--&gt;&gt;AuthService: Invalid Credentials  AuthService--&gt;&gt;LoginViewModel: throw InvalidCredentialsException  LoginViewModel--&gt;&gt;LoginController: return false  LoginController--&gt;&gt;LoginView: Show Error  end  end   <p>  The login sequence diagram illustrates the interaction between the user and the system components  during the authentication process. It highlights the validation steps and the handling of both  successful  and failed authentication attempts.  </p> Key Features <ul> <li>Input Validation: Ensures that user credentials meet required formats and  constraints.  </li> <li>Authentication: Validates credentials against stored data to authenticate the user.  </li> <li>Token Management: Stores authentication tokens upon successful login for session  management.</li> <li>Error Handling: Displays appropriate error messages for invalid inputs or failed  authentications.</li> <li>Remember Me Functionality: Allows users to stay logged in across sessions using  tokens.  </li> </ul> Register Sequence Diagram   sequenceDiagram  %% Actors and Participants  actor User  participant RegisterView  participant RegisterController  participant RegisterViewModel  participant UserService  participant DB    %% Register Flow  User-&gt;&gt;RegisterView: Click Register  RegisterView-&gt;&gt;RegisterController: handleRegister()  RegisterController-&gt;&gt;RegisterViewModel: register()  RegisterViewModel-&gt;&gt;RegisterViewModel: validateInput()    alt Invalid Input  RegisterViewModel--&gt;&gt;RegisterController: return false  RegisterController--&gt;&gt;RegisterView: Show Validation Error  else Valid Input  RegisterViewModel-&gt;&gt;UserService: registerUser(RegisterRequestDTO)  UserService-&gt;&gt;DB: save()  DB--&gt;&gt;UserService: User Created  UserService--&gt;&gt;RegisterViewModel: Success  RegisterViewModel--&gt;&gt;RegisterController: return true  RegisterController--&gt;&gt;RegisterView: Show Success &amp; Navigate to Login  end   <p>  The register sequence diagram outlines the process of user registration within the system. It covers  input  validation, user creation, and the subsequent feedback provided to the user upon successful or failed  registration attempts.  </p> Key Features <ul> <li>Input Validation: Ensures that registration details are valid and meet all  requirements.</li> <li>User Creation: Persists new user data to the database upon successful validation.  </li> <li>Feedback Mechanism: Notifies users of successful registration and redirects them to  the  login view.</li> <li>Error Handling: Displays validation errors if inputs are invalid or if the user  already  exists.</li> <li>Role Assignment: Allows assignment of user roles (e.g., Admin, User) during  registration.</li> </ul> Unified Data Dictionary <p>This section provides a comprehensive data dictionary for the login and  register  processes.</p> Data Transfer Objects (DTOs) DTO Fields Description LoginRequestDTO   String username  String password  boolean rememberMe  String ipAddress   Data required for user login. AuthenticationResultDTO   String token  String rememberMeToken   Result of successful authentication. RegisterRequestDTO   String username  String email  String password  String firstName  String lastName  String role   Data required for user registration. Entities and Models Entity/Model Fields Description User   UUID userId  String username  String email  String passwordHash  String firstName  String lastName  String role   Represents a user in the system. View States View State Fields Description LoginViewState   boolean loginInProgress  boolean passkeyAvailable  String errorMessage  boolean rememberMe   State information for the login view. RegisterViewState   boolean registrationInProgress  PasswordStrength passwordStrength  String errorMessage  boolean rtl   State information for the register view. Services Service Interface Methods Description AuthService   AuthenticationResultDTO authenticate(LoginRequestDTO request) throws  InvalidCredentialsException   Handles user authentication. TokenService   void storeToken(String token)  String retrieveToken()   Manages storage and retrieval of authentication tokens. UserService   void registerUser(RegisterRequestDTO request) throws UserAlreadyExistsException   Handles user registration. DB   User findUserByUsername(String username)  void saveUser(User user)   Database access object for user data. Exceptions Exception Description InvalidCredentialsException Thrown when authentication fails due to invalid credentials. UserAlreadyExistsException Thrown when attempting to register a user that already exists."},{"location":"pages/docs/flow/loginregister-management/#login-register-title","title":"Login &amp; Register Documentation","text":"<p>This documentation provides guidelines on user authentication processes, including login procedures,  registration workflows, and security measures.</p>"},{"location":"pages/docs/flow/loginregister-management/#ui-component-hierarchy","title":"UI Component Hierarchy","text":"graph TD  %% Main Components  Root[BorderPane: Root]  Content[StackPane: Content]  Forms[VBox: Forms]    %% Login Components  LoginForm[VBox: LoginForm]  Username[TextField: Username]  Password[PasswordField: Password]  RememberMe[CheckBox: RememberMe]  LoginBtn[Button: Login]    %% Register Components  RegisterForm[VBox: RegisterForm]  RegUsername[TextField: Username]  RegEmail[TextField: Email]  RegPassword[PasswordField: Password]  RegConfirm[PasswordField: Confirm]  RegisterBtn[Button: Register]    %% Navigation  NavLinks[HBox: Navigation]  ToLogin[Hyperlink: LoginLink]  ToRegister[Hyperlink: RegisterLink]    %% Hierarchy  Root --&gt; Content  Content --&gt; Forms  Forms --&gt; LoginForm  Forms --&gt; RegisterForm  Forms --&gt; NavLinks    LoginForm --&gt; Username  LoginForm --&gt; Password  LoginForm --&gt; RememberMe  LoginForm --&gt; LoginBtn    RegisterForm --&gt; RegUsername  RegisterForm --&gt; RegEmail  RegisterForm --&gt; RegPassword  RegisterForm --&gt; RegConfirm  RegisterForm --&gt; RegisterBtn    NavLinks --&gt; ToLogin  NavLinks --&gt; ToRegister    %% Styling  classDef container fill:#e1f5fe,stroke:#01579b  classDef form fill:#fff,stroke:#0288d1  classDef control fill:#e8f5e9,stroke:#2e7d32  classDef nav fill:#fff3e0,stroke:#f57c00    class Root,Content,Forms container  class LoginForm,RegisterForm form  class Username,Password,RegUsername,RegEmail,RegPassword,RegConfirm,LoginBtn,RegisterBtn control  class NavLinks,ToLogin,ToRegister nav"},{"location":"pages/docs/flow/project-management/","title":"Project Flow","text":"Project Management Documentation - ProjectHub Project Management Documentation UI Component Hierarchy |  Project Dashboard Sequence |  Project Details Sequence |  Workshop Sequence |  Performance Analysis Sequence |  Data Dictionary |  Go Back"},{"location":"pages/docs/flow/project-management/#project-management-doc","title":"Project Management Documentation","text":"<p>Comprehensive guide on managing projects within ProjectHub, including project setup, milestone tracking, and  resource allocation.</p>"},{"location":"pages/docs/flow/project-management/#ui-component-hierarchy","title":"UI Component Hierarchy","text":"graph TD  %% Core Layout A[BorderPane: Root] B[TabPane: Content] A --&gt; B  %% Tab Views C[ScrollPane: Dashboard] D[ScrollPane: Details] E[ScrollPane: Workshop] F[ScrollPane: Analytics]  B --&gt; C B --&gt; D B --&gt; E B --&gt; F  %% Dashboard Components G[Statistics] H[Progress] I[Charts] C --&gt; G &amp; H &amp; I  %% Details Components J[Details Form] K[Tasks] L[Resources] D --&gt; J &amp; K &amp; L  %% Workshop Components M[WorkArea] N[Tools] O[Layers] E --&gt; M &amp; N &amp; O  %% Analytics Components P[Charts] Q[Metrics] F --&gt; P &amp; Q  %% Styling classDef c1 fill:#e1f5fe,stroke:#01579b classDef c2 fill:#fff,stroke:#0288d1 classDef c3 fill:#e8f5e9,stroke:#2e7d32  class A,B c1 class C,D,E,F c2 class G,H,I,J,K,L,M,N,O,P,Q c3"},{"location":"pages/docs/flow/project-management/#project-dashboard-sequence","title":"Project Dashboard Sequence Diagram","text":"sequenceDiagram  actor User  participant DashboardView  participant DashboardController  participant ProjectViewModel  participant StatisticsService  participant DB    %% Initial Dashboard Load  User-&gt;&gt;DashboardView: Open Dashboard  DashboardView-&gt;&gt;DashboardController: initialize()  DashboardController-&gt;&gt;ProjectViewModel: loadProjects()  ProjectViewModel-&gt;&gt;DB: fetchProjects()  DB--&gt;&gt;ProjectViewModel: projects list  ProjectViewModel--&gt;&gt;DashboardController: updateProjectSelector    par Statistics Cards  DashboardController-&gt;&gt;StatisticsService: getTaskStats()  StatisticsService-&gt;&gt;DB: fetch task metrics  DB--&gt;&gt;StatisticsService: task counts  StatisticsService--&gt;&gt;DashboardController: update stat cards  and Progress Grid  DashboardController-&gt;&gt;StatisticsService: getProjectProgress()  StatisticsService-&gt;&gt;DB: fetch progress data  DB--&gt;&gt;StatisticsService: progress metrics  StatisticsService--&gt;&gt;DashboardController: update progress bars  end    DashboardController--&gt;&gt;DashboardView: refresh UI  DashboardView--&gt;&gt;User: Display Dashboard    %% Project Selection  User-&gt;&gt;DashboardView: Select Project  DashboardView-&gt;&gt;DashboardController: handleProjectSelection()  DashboardController-&gt;&gt;ProjectViewModel: updateSelectedProject()  ProjectViewModel-&gt;&gt;DB: fetchProjectDetails()  DB--&gt;&gt;ProjectViewModel: project details  ProjectViewModel--&gt;&gt;DashboardController: update project view  DashboardController--&gt;&gt;DashboardView: refresh project data    %% View Details  User-&gt;&gt;DashboardView: Click View Details  DashboardView-&gt;&gt;DashboardController: handleViewDetails()  DashboardController--&gt;&gt;DashboardView: navigate to details view"},{"location":"pages/docs/flow/project-management/#project-details-sequence","title":"Project Details Sequence Diagram","text":"sequenceDiagram  actor User  participant DetailView  participant DetailController  participant ProjectViewModel  participant TaskService  participant FileService  participant ResourceService  participant DB    %% Initial Load  User-&gt;&gt;DetailView: Open Project Details  DetailView-&gt;&gt;DetailController: initialize()  DetailController-&gt;&gt;ProjectViewModel: loadProjectsList()  ProjectViewModel-&gt;&gt;DB: fetchProjects()  DB--&gt;&gt;ProjectViewModel: projects list  ProjectViewModel--&gt;&gt;DetailController: updateProjectSelector()    %% Project Selection  User-&gt;&gt;DetailView: Select Project  DetailView-&gt;&gt;DetailController: handleProjectSelection(projectId)    par Project Info  DetailController-&gt;&gt;ProjectViewModel: getProjectDetails()  ProjectViewModel-&gt;&gt;DB: fetch project  DB--&gt;&gt;ProjectViewModel: project data  ProjectViewModel--&gt;&gt;DetailController: update project fields  and Task List  DetailController-&gt;&gt;TaskService: getProjectTasks()  TaskService-&gt;&gt;DB: fetch tasks  DB--&gt;&gt;TaskService: tasks data  TaskService--&gt;&gt;DetailController: update tasksTable  and File List  DetailController-&gt;&gt;FileService: getProjectFiles()  FileService-&gt;&gt;DB: fetch files  DB--&gt;&gt;FileService: files data  FileService--&gt;&gt;DetailController: update filesTable  and Resources  DetailController-&gt;&gt;ResourceService: getProjectResources()  ResourceService-&gt;&gt;DB: fetch resources  DB--&gt;&gt;ResourceService: resources data  ResourceService--&gt;&gt;DetailController: update resourcesTable  end    DetailController--&gt;&gt;DetailView: refresh UI    %% Task Operations  User-&gt;&gt;DetailView: Add Task  DetailView-&gt;&gt;DetailController: handleAddTask()  DetailController-&gt;&gt;TaskService: createTask(taskData)  TaskService-&gt;&gt;DB: save task  DB--&gt;&gt;TaskService: confirmation  TaskService--&gt;&gt;DetailController: update tasksTable    %% File Operations  User-&gt;&gt;DetailView: Upload File  DetailView-&gt;&gt;DetailController: handleFileUpload()  DetailController-&gt;&gt;FileService: uploadFile(fileData)  FileService-&gt;&gt;DB: save file  DB--&gt;&gt;FileService: confirmation  FileService--&gt;&gt;DetailController: update filesTable    %% Resource Management  User-&gt;&gt;DetailView: Add Resource  DetailView-&gt;&gt;DetailController: handleAddResource()  DetailController-&gt;&gt;ResourceService: addResource(resourceData)  ResourceService-&gt;&gt;DB: save resource  DB--&gt;&gt;ResourceService: confirmation  ResourceService--&gt;&gt;DetailController: update resourcesTable    %% Progress Update  DetailController-&gt;&gt;ProjectViewModel: updateProgress()  ProjectViewModel-&gt;&gt;DB: save progress  DB--&gt;&gt;ProjectViewModel: confirmation  ProjectViewModel--&gt;&gt;DetailController: refresh progress bar  DetailController--&gt;&gt;DetailView: update UI"},{"location":"pages/docs/flow/project-management/#workshop-sequence","title":"Workshop Sequence Diagram","text":"sequenceDiagram  actor User  participant WorkshopView  participant WorkshopController  participant ResourceManager  participant LayerManager  participant CanvasManager  participant PropertyManager  participant FileSystem    %% Initial Load  User-&gt;&gt;WorkshopView: Open Workshop  WorkshopView-&gt;&gt;WorkshopController: initialize()    par Resource Loading  WorkshopController-&gt;&gt;ResourceManager: loadResources()  ResourceManager-&gt;&gt;FileSystem: fetchResourceList()  FileSystem--&gt;&gt;ResourceManager: resources  ResourceManager--&gt;&gt;WorkshopController: updateResourceList()  and Layer Setup  WorkshopController-&gt;&gt;LayerManager: initializeLayers()  LayerManager--&gt;&gt;WorkshopController: layerStructure  and Canvas Setup  WorkshopController-&gt;&gt;CanvasManager: setupCanvas()  CanvasManager--&gt;&gt;WorkshopController: canvasReady  end    WorkshopController--&gt;&gt;WorkshopView: setup complete    %% Resource Operations  User-&gt;&gt;WorkshopView: Select Resource  WorkshopView-&gt;&gt;WorkshopController: handleResourceSelection()  WorkshopController-&gt;&gt;ResourceManager: loadResource()  ResourceManager--&gt;&gt;WorkshopController: resourceLoaded  WorkshopController-&gt;&gt;CanvasManager: placeResourceOnCanvas()    %% Layer Management  User-&gt;&gt;WorkshopView: Add Layer  WorkshopView-&gt;&gt;WorkshopController: handleAddLayer()  WorkshopController-&gt;&gt;LayerManager: createNewLayer()  LayerManager--&gt;&gt;WorkshopController: layerCreated  WorkshopController-&gt;&gt;CanvasManager: refreshLayers()    %% Canvas Interactions  User-&gt;&gt;WorkshopView: Modify Canvas  WorkshopView-&gt;&gt;WorkshopController: handleCanvasAction()  WorkshopController-&gt;&gt;CanvasManager: processAction()  CanvasManager-&gt;&gt;PropertyManager: updateProperties()  PropertyManager--&gt;&gt;WorkshopController: propertiesUpdated  WorkshopController--&gt;&gt;WorkshopView: refresh view    %% Save Operation  User-&gt;&gt;WorkshopView: Click Save  WorkshopView-&gt;&gt;WorkshopController: handleSave()  WorkshopController-&gt;&gt;CanvasManager: captureState()  CanvasManager--&gt;&gt;WorkshopController: currentState  WorkshopController-&gt;&gt;FileSystem: saveProject()  FileSystem--&gt;&gt;WorkshopController: saveConfirmed  WorkshopController--&gt;&gt;WorkshopView: show success    %% Undo/Redo  User-&gt;&gt;WorkshopView: Click Undo  WorkshopView-&gt;&gt;WorkshopController: handleUndo()  WorkshopController-&gt;&gt;CanvasManager: undoLastAction()  CanvasManager-&gt;&gt;PropertyManager: syncProperties()  PropertyManager--&gt;&gt;WorkshopController: stateRestored  WorkshopController--&gt;&gt;WorkshopView: refresh canvas"},{"location":"pages/docs/flow/project-management/#performance-analysis-sequence","title":"Project Performance Analysis Sequence DiagramUnified Data Dictionary","text":"sequenceDiagram  actor User  participant AnalyticsView  participant AnalyticsController  participant ChartService  participant ResourceService  participant DB    %% Initial Load  User-&gt;&gt;AnalyticsView: Open Analytics  AnalyticsView-&gt;&gt;AnalyticsController: initialize()  AnalyticsController-&gt;&gt;ChartService: loadProjectList()  ChartService-&gt;&gt;DB: fetchProjects()  DB--&gt;&gt;ChartService: projects  ChartService--&gt;&gt;AnalyticsController: updateProjectSelector    %% Project Selection  User-&gt;&gt;AnalyticsView: Select Project  AnalyticsView-&gt;&gt;AnalyticsController: handleProjectSelection()    par Overall Progress Chart  AnalyticsController-&gt;&gt;ChartService: getProgressData()  ChartService-&gt;&gt;DB: fetchProgressMetrics  DB--&gt;&gt;ChartService: progress data  ChartService--&gt;&gt;AnalyticsController: updatePieChart  and Tasks Overview  AnalyticsController-&gt;&gt;ChartService: getTasksOverview()  ChartService-&gt;&gt;DB: fetchTaskMetrics  DB--&gt;&gt;ChartService: tasks data  ChartService--&gt;&gt;AnalyticsController: updateBarChart  and Completion Rate  AnalyticsController-&gt;&gt;ChartService: getCompletionTrend()  ChartService-&gt;&gt;DB: fetchTrendData  DB--&gt;&gt;ChartService: trend metrics  ChartService--&gt;&gt;AnalyticsController: updateLineChart  and Resource Table  AnalyticsController-&gt;&gt;ResourceService: getResourceUtilization()  ResourceService-&gt;&gt;DB: fetchResourceData  DB--&gt;&gt;ResourceService: resource metrics  ResourceService--&gt;&gt;AnalyticsController: updateTable  end    AnalyticsController--&gt;&gt;AnalyticsView: refreshUI  AnalyticsController-&gt;&gt;AnalyticsView: updateStatusBar  AnalyticsView--&gt;&gt;User: Display Analytics    %% Back Navigation  User-&gt;&gt;AnalyticsView: Click Back  AnalyticsView-&gt;&gt;AnalyticsController: handleBack()  AnalyticsController--&gt;&gt;AnalyticsView: navigateToDashboard     Comprehensive data structures used across project management modules.   Project Entities Entity Fields Description Project   UUID projectId  String name  String description  DateTime startDate  DateTime endDate  ProjectStatus status  Double progress   Core project information Task   UUID taskId  String title  String description  TaskStatus status  DateTime dueDate  UUID assigneeId   Project task details Resource   UUID resourceId  String name  ResourceType type  Double utilization  Boolean isAvailable   Project resource information Analytics Data Metric Fields Description Performance Metrics   Double completionRate  Integer taskCount  Integer completedTasks  Double progressPercentage   Project performance indicators Resource Metrics   Double utilizationRate  Integer activeResources  Integer totalResources  Map&lt;ResourceType, Integer&gt; distribution   Resource utilization metrics Workshop Components Component Fields Description Canvas State   List&lt;Layer&gt; layers  Map&lt;String, Object&gt; properties  List&lt;HistoryAction&gt; undoStack  List&lt;HistoryAction&gt; redoStack   Workshop canvas state Resource Asset   String assetId  String path  AssetType type  Map&lt;String, String&gt; metadata   Workshop resource assets"},{"location":"pages/docs/flow/task-management/","title":"Task Flow","text":"Task Management Documentation - ProjectHub Task Management Documentation UI Components Structure |  Task Operations Sequence |  Data Dictionary |  Go Back Data Dictionary Entities Entity Fields Description Task   UUID id  String name  String description  String status  LocalDate dueDate  UUID assigneeId   Task entity Components Component Type Description TaskDetailsController Controller Handles user interactions and view logic TaskDetailsViewModel ViewModel Manages task data and business logic TaskService Service Handles task persistence and retrieval Data Transfer Objects DTO Fields Description TaskDTO   UUID id  String name  String description  String status  LocalDate dueDate  UUID assigneeId   Task data transfer object View States State Type Description selectedTask SimpleObjectProperty&lt;TaskDTO&gt; Currently selected task searchQuery SimpleStringProperty Current search filter tasks ObservableList&lt;TaskDTO&gt; List of visible tasks"},{"location":"pages/docs/flow/task-management/#task-management-doc","title":"Task Management Documentation","text":"<p>This section details the processes involved in managing tasks within ProjectHub, including task creation, assignment, tracking, and completion.</p>"},{"location":"pages/docs/flow/task-management/#ui-components-structure","title":"UI Components Structure","text":"graph TD  %% Main Components  Root[BorderPane: Root]  TopBar[HBox: TopBar]  Content[SplitPane: Content]  SideNav[VBox: Navigation]  TaskList[VBox: TaskList]  Details[ScrollPane: Details]    %% Task List Components  SearchBar[SearchBar]  TaskTable[TableView: Tasks]  Filters[HBox: Filters]    %% Task Details Components  TaskForm[Form: TaskDetails]  Actions[HBox: Actions]  Status[StatusBar]    %% Hierarchy  Root --&gt; TopBar  Root --&gt; Content  Content --&gt; SideNav  Content --&gt; TaskList  Content --&gt; Details    %% Task List Breakdown  TaskList --&gt; SearchBar  TaskList --&gt; Filters  TaskList --&gt; TaskTable    %% Details Breakdown  Details --&gt; TaskForm  Details --&gt; Actions  Details --&gt; Status    %% Styling  classDef container fill:#e1f5fe,stroke:#01579b  classDef component fill:#fff,stroke:#0288d1  classDef action fill:#e8f5e9,stroke:#2e7d32    class Root,Content,TaskList,Details container  class SearchBar,TaskTable,TaskForm,Status component  class TopBar,Actions,Filters action"},{"location":"pages/docs/flow/task-management/#task-operations-sequence","title":"Task Operations Sequence","text":"sequenceDiagram  actor User  participant View  participant Controller  participant ViewModel  participant Service  participant DB    Note over User,View: Task Creation Flow  User-&gt;&gt;View: Click Add Task  View-&gt;&gt;Controller: handleAddTask()  Controller-&gt;&gt;View: showTaskForm()  User-&gt;&gt;View: Fill Task Details  User-&gt;&gt;View: Click Save  View-&gt;&gt;Controller: handleSaveTask()  Controller-&gt;&gt;ViewModel: saveTask(TaskDTO)  ViewModel-&gt;&gt;Service: saveTask()  Service-&gt;&gt;DB: persist()  DB--&gt;&gt;Service: success  Service--&gt;&gt;ViewModel: update  ViewModel--&gt;&gt;Controller: refresh  Controller--&gt;&gt;View: showSuccess()    Note over User,View: Task Search Flow  User-&gt;&gt;View: Enter Search Query  View-&gt;&gt;Controller: onSearchChange()  Controller-&gt;&gt;ViewModel: searchTasks()  ViewModel-&gt;&gt;Service: searchByQuery()  Service--&gt;&gt;ViewModel: results  ViewModel--&gt;&gt;View: updateTaskList"},{"location":"pages/docs/flow/team-management/","title":"Team Flow","text":"Team Management Documentation - ProjectHub"},{"location":"pages/docs/flow/team-management/#team-management-title","title":"Team Management Documentation","text":"Component Hierarchy |  Team Management Sequence |  Data Dictionary |  Go Back <p>This documentation covers ProjectHub's team management system, including team creation, member assignments, and project associations.</p>"},{"location":"pages/docs/flow/team-management/#component-hierarchy","title":"Component Hierarchy","text":"graph TD  %% Main Components  Root[BorderPane: Root]  Content[SplitPane: Content]  List[VBox: TeamList]  Details[ScrollPane: Details]    %% List Components  SearchBar[TextField: Search]  TeamTable[TableView: Teams]  AddButton[Button: AddTeam]    %% Details Components  TeamForm[Form: TeamForm]  NameField[TextField: Name]  CohortSelect[ComboBox: Cohort]  MemberList[TableView: Members]  ProjectList[TableView: Projects]    %% Action Components  Actions[HBox: Actions]  SaveBtn[Button: Save]  DeleteBtn[Button: Delete]    %% Hierarchy  Root --&gt; Content  Content --&gt; List  Content --&gt; Details    List --&gt; SearchBar  List --&gt; TeamTable  List --&gt; AddButton    Details --&gt; TeamForm  TeamForm --&gt; NameField  TeamForm --&gt; CohortSelect  Details --&gt; MemberList  Details --&gt; ProjectList  Details --&gt; Actions    Actions --&gt; SaveBtn  Actions --&gt; DeleteBtn    %% Styling  classDef container fill:#e1f5fe,stroke:#01579b  classDef component fill:#fff,stroke:#0288d1  classDef control fill:#e8f5e9,stroke:#2e7d32    class Root,Content container  class List,Details,TeamForm component  class SearchBar,TeamTable,NameField,CohortSelect,MemberList,ProjectList,SaveBtn,DeleteBtn control"},{"location":"pages/docs/flow/team-management/#team-management-sequence","title":"Team Management Sequence","text":"sequenceDiagram  actor User  participant View as TeamView  participant Controller as TeamController  participant ViewModel as TeamViewModel  participant Service as TeamService  participant DB as Database    %% Load Teams  User-&gt;&gt;View: Open Teams  View-&gt;&gt;Controller: initialize()  Controller-&gt;&gt;ViewModel: loadTeams()  ViewModel-&gt;&gt;Service: getAllTeams()  Service-&gt;&gt;DB: fetchTeams()  DB--&gt;&gt;Service: teams  Service--&gt;&gt;ViewModel: teamsList  ViewModel--&gt;&gt;View: updateTeamTable()    %% Team Operations  User-&gt;&gt;View: Create Team  View-&gt;&gt;Controller: handleNewTeam()  Controller-&gt;&gt;ViewModel: createTeam(TeamDTO)  ViewModel-&gt;&gt;Service: saveTeam()  Service-&gt;&gt;DB: persist()  DB--&gt;&gt;Service: confirmation  Service--&gt;&gt;View: showSuccess()    %% Member Management  User-&gt;&gt;View: Add Member  View-&gt;&gt;Controller: handleAddMember()  Controller-&gt;&gt;ViewModel: addMember(userId)  ViewModel-&gt;&gt;Service: assignMember()  Service-&gt;&gt;DB: updateTeam()  DB--&gt;&gt;Service: updated  Service--&gt;&gt;View: refreshMembers()"},{"location":"pages/docs/flow/team-management/#data-dictionary","title":"Data Dictionary","text":"Team Entity Field Type Description teamId UUID Unique identifier name String Team name cohortId UUID Associated cohort members List&lt;UUID&gt; Team members projects List&lt;UUID&gt; Assigned projects View States State Type Description selectedTeam TeamDTO Currently selected team memberList ObservableList&lt;UserDTO&gt; Team members list projectList ObservableList&lt;ProjectDTO&gt; Team projects"},{"location":"pages/docs/flow/user-management/","title":"User Flow","text":"User Management - ProjectHub User Management Component Hierarchy |  User Management Sequence |  Data Dictionary |  Go Back <p>\u00a9 2024 ProjectHub. All rights reserved.</p>"},{"location":"pages/docs/flow/user-management/#user-management-doc","title":"User Management Documentation","text":"<p>This section provides comprehensive information on managing users within ProjectHub, including user creation, role assignments, and account management.</p>"},{"location":"pages/docs/flow/user-management/#component-hierarchy","title":"Component Hierarchy","text":"graph TD  %% Main Components  Root[BorderPane: Root]  Content[SplitPane: Content]  List[VBox: UserList]  Details[ScrollPane: UserDetails]    %% List Components  SearchBar[TextField: Search]  UserTable[TableView: Users]  AddButton[Button: AddUser]    %% Details Components  UserForm[Form: UserDetails]  NameField[TextField: Name]  EmailField[TextField: Email]  RoleSelect[ComboBox: Role]  Activities[TableView: Activities]    %% Actions  Actions[HBox: Actions]  SaveBtn[Button: Save]  ResetPwdBtn[Button: ResetPassword]    %% Hierarchy  Root --&gt; Content  Content --&gt; List  Content --&gt; Details    List --&gt; SearchBar  List --&gt; UserTable  List --&gt; AddButton    Details --&gt; UserForm  UserForm --&gt; NameField  UserForm --&gt; EmailField  UserForm --&gt; RoleSelect  Details --&gt; Activities  Details --&gt; Actions    Actions --&gt; SaveBtn  Actions --&gt; ResetPwdBtn    %% Styling  classDef container fill:#e1f5fe,stroke:#01579b  classDef component fill:#fff,stroke:#0288d1  classDef control fill:#e8f5e9,stroke:#2e7d32    class Root,Content container  class List,Details,UserForm component  class SearchBar,UserTable,NameField,EmailField,RoleSelect,Activities,SaveBtn,ResetPwdBtn control"},{"location":"pages/docs/flow/user-management/#user-management-sequence","title":"User Management SequenceData Dictionary","text":"sequenceDiagram  actor Admin  participant View as UserManagement  participant Controller  participant ViewModel  participant Service  participant DB    %% Load Users  Admin-&gt;&gt;View: Open Users  View-&gt;&gt;Controller: initialize()  Controller-&gt;&gt;ViewModel: loadUsers()  ViewModel-&gt;&gt;Service: getUsers()  Service-&gt;&gt;DB: fetchUsers()  DB--&gt;&gt;Service: users  Service--&gt;&gt;ViewModel: usersList  ViewModel--&gt;&gt;View: updateUserTable()    %% User Operations  Admin-&gt;&gt;View: Select User  View-&gt;&gt;Controller: handleUserSelect()  Controller-&gt;&gt;ViewModel: loadUserDetails()  ViewModel-&gt;&gt;Service: getUserDetails()  Service-&gt;&gt;DB: fetchDetails()  DB--&gt;&gt;Service: userDetails  Service--&gt;&gt;ViewModel: userDTO  ViewModel--&gt;&gt;View: displayUserDetails()    %% Edit User  Admin-&gt;&gt;View: Edit User  View-&gt;&gt;Controller: handleEditUser()  Controller-&gt;&gt;ViewModel: validateUserData()    alt Valid Input  ViewModel-&gt;&gt;Service: updateUser()  Service-&gt;&gt;DB: saveUser()  DB--&gt;&gt;Service: success  Service--&gt;&gt;ViewModel: updated  ViewModel--&gt;&gt;View: showSuccess()  else Invalid Input  ViewModel--&gt;&gt;View: showValidationError()  end    %% Role Management  Admin-&gt;&gt;View: Change Role  View-&gt;&gt;Controller: handleRoleChange()  Controller-&gt;&gt;ViewModel: updateUserRole()  ViewModel-&gt;&gt;Service: changeRole()  Service-&gt;&gt;DB: updateRole()  DB--&gt;&gt;Service: success  Service--&gt;&gt;View: refreshUserDetails()   User Entity Field Type Description email String User email role UserRole User permission level status UserStatus Account status Activity Log Field Type Description logId UUID Activity identifier userId UUID User reference action ActivityType Type of activity timestamp DateTime When activity occurred"},{"location":"pages/docs/flow/user-management/#user-management-doc","title":"User Management Documentation","text":"<p>This section provides comprehensive information on managing users within ProjectHub, including user creation, role assignments, and account management.</p>"},{"location":"pages/docs/reference/cdc/","title":"CDC","text":"Cahier des Charges - ProjectHub Cahier des Charges CDC-PH 1124 JFX-VFINAL Plateforme de Gestion de Projets \u00c9ducatifs <p>Version: 1.0</p> <p>Auteur: BILAL EL KHATABI</p> <p>Date: 25/12/2024</p> Introduction <p>  Bienvenue ! ProjectHub est une plateforme que nous avons con\u00e7ue pour vous aider \u00e0 g\u00e9rer  les projets \u00e9tudiants, \u00e9valuer les travaux et distribuer les sujets de mani\u00e8re plus efficace. L'id\u00e9e est  de simplifier et d'optimiser le travail, que vous soyez \u00e9tudiant ou enseignant. Nous utilisons JavaFX,  Spring Boot et PostgreSQL pour cela.  </p> Objectifs <ul> <li>Gestion de projet simplifi\u00e9e : Nous voulons vous offrir des outils faciles \u00e0  utiliser pour cr\u00e9er, modifier et suivre vos projets.</li> <li>T\u00e2ches organis\u00e9es : La plateforme vous permet de r\u00e9partir les t\u00e2ches et de suivre  leur avancement avec pr\u00e9cision.</li> <li>Ressources bien g\u00e9r\u00e9es : Nous nous assurons que les ressources sont utilis\u00e9es de  mani\u00e8re optimale.</li> <li>Comptes s\u00e9curis\u00e9s : La gestion des comptes utilisateurs est bas\u00e9e sur les r\u00f4les  pour garantir la s\u00e9curit\u00e9 et la confidentialit\u00e9.</li> </ul> Port\u00e9e du Projet <p>Voici les grands axes que nous allons couvrir :</p> <ol> <li>Gestion des Projets : Cr\u00e9ation, suivi, etc.</li> <li>Gestion des T\u00e2ches : Assignation, suivi d'avancement, etc.</li> <li>Gestion des Ressources : Allocation, suivi d'utilisation, etc.</li> <li>Gestion des Comptes : Inscription, r\u00f4les, permissions, etc.</li> </ol> 1. Gestion des Projets Fonctionnalit\u00e9s <ul> <li> <p>\u00c9diter un Projet</p> <ul> <li>Description : Les enseignants peuvent cr\u00e9er et modifier les d\u00e9tails des  projets.</li> <li>Actions :  <ul> <li>Cr\u00e9er un nouveau projet avec des infos comme le nom, la description, les dates  limites et les crit\u00e8res d'\u00e9valuation.</li> <li>Modifier les d\u00e9tails d'un projet existant.</li> <li>Supprimer un projet si besoin.</li> </ul> </li> </ul> </li> <li> <p>Lister les Projets</p> <ul> <li>Description : Une liste de tous les projets disponibles.</li> <li>Actions :  <ul> <li>Voir les projets en cours et ceux qui sont termin\u00e9s.</li> <li>Filtrer les projets par statut, date ou autres crit\u00e8res.</li> </ul> </li> </ul> </li> <li> <p>Consulter les D\u00e9tails d'un Projet</p> <ul> <li>Description : Acc\u00e9der aux d\u00e9tails complets d'un projet sp\u00e9cifique.</li> <li>Actions :  <ul> <li>Voir la description, les dates limites, les \u00e9quipes assign\u00e9es et les t\u00e2ches  associ\u00e9es.</li> <li>Acc\u00e9der aux documents et ressources li\u00e9s au projet.</li> </ul> </li> </ul> </li> </ul> Tableau des R\u00e8gles de Gestion R\u00e8gle ID Description de la R\u00e8gle Conditions Actions RG-001 Chaque projet doit avoir un nom unique. Lors de la cr\u00e9ation d'un projet. V\u00e9rifier que le nom n'existe pas d\u00e9j\u00e0 avant de sauvegarder. RG-002 Les dates limites des projets doivent \u00eatre dans le futur. Lors de la cr\u00e9ation ou modification. S'assurer que les dates limites ne sont pas pass\u00e9es. RG-003 Seuls les enseignants peuvent cr\u00e9er ou modifier les projets. Contr\u00f4le d'acc\u00e8s. Restreindre les modifications aux utilisateurs autoris\u00e9s. RG-004 Un projet peut avoir plusieurs \u00e9quipes assign\u00e9es. Lors de l'assignation des \u00e9quipes. Permettre l'ajout et la suppression d'\u00e9quipes pour un projet. 2. Gestion des T\u00e2ches Fonctionnalit\u00e9s <ul> <li> <p>Cr\u00e9er et Assigner des T\u00e2ches</p> <ul> <li>Description : Cr\u00e9er des t\u00e2ches et les assigner aux membres de l'\u00e9quipe.  </li> <li>Actions :  <ul> <li>D\u00e9finir le titre, la description, la priorit\u00e9 et les dates limites des t\u00e2ches.</li> <li>Assigner des t\u00e2ches aux membres de l'\u00e9quipe.</li> </ul> </li> </ul> </li> <li> <p>Suivre l'Avancement des T\u00e2ches</p> <ul> <li>Description : Voir l'\u00e9tat d'avancement des diff\u00e9rentes t\u00e2ches.</li> <li>Actions :  <ul> <li>Mettre \u00e0 jour le statut des t\u00e2ches (\u00c0 faire, En cours, Termin\u00e9).</li> <li>G\u00e9n\u00e9rer des rapports d'avancement.</li> </ul> </li> </ul> </li> <li> <p>Notifier les Membres des \u00c9quipes</p> <ul> <li>Description : Envoyer des notifications lors de la cr\u00e9ation ou de la mise \u00e0  jour des t\u00e2ches.</li> <li>Actions :  <ul> <li>Envoyer des emails ou des notifications in-app.</li> </ul> </li> </ul> </li> </ul> Tableau des R\u00e8gles de Gestion R\u00e8gle ID Description de la R\u00e8gle Conditions Actions RG-005 Chaque t\u00e2che doit \u00eatre assign\u00e9e \u00e0 au moins un membre. Lors de la cr\u00e9ation d'une t\u00e2che. Obliger la s\u00e9lection d'un membre lors de l'assignation. RG-006 Les dates limites des t\u00e2ches doivent \u00eatre dans le cadre du projet. Lors de la d\u00e9finition des dates limites. S'assurer que la date limite d'une t\u00e2che est avant celle du projet. RG-007 Les priorit\u00e9s des t\u00e2ches doivent \u00eatre d\u00e9finies (Haute, Moyenne, Basse). Lors de la cr\u00e9ation ou modification des t\u00e2ches. Restreindre les options de priorit\u00e9 \u00e0 celles propos\u00e9es. RG-008 Seuls les membres assign\u00e9s peuvent modifier le statut des t\u00e2ches. Contr\u00f4le d'acc\u00e8s. Autoriser uniquement les membres assign\u00e9s \u00e0 mettre \u00e0 jour les statuts. 3. Gestion des Ressources Fonctionnalit\u00e9s <ul> <li> <p>Ajouter et G\u00e9rer les Ressources</p> <ul> <li>Description : Ajouter les ressources n\u00e9cessaires pour les projets.</li> <li>Actions :  <ul> <li>Ajouter des ressources mat\u00e9rielles et logicielles.</li> <li>G\u00e9rer la disponibilit\u00e9 et l'allocation des ressources.</li> </ul> </li> </ul> </li> <li> <p>Suivre l'Utilisation des Ressources</p> <ul> <li>Description : Suivre l'utilisation des ressources allou\u00e9es aux projets.  </li> <li>Actions :  <ul> <li>G\u00e9n\u00e9rer des rapports sur l'utilisation des ressources.</li> <li>Identifier les ressources sur-utilis\u00e9es ou sous-utilis\u00e9es.</li> </ul> </li> </ul> </li> <li> <p>Optimiser l'Allocation des Ressources</p> <ul> <li>Description : Allouer efficacement les ressources en fonction des besoins  des projets.</li> <li>Actions :  <ul> <li>R\u00e9assigner les ressources en cas de d\u00e9s\u00e9quilibre.</li> <li>Planifier l'acquisition de nouvelles ressources si n\u00e9cessaire.</li> </ul> </li> </ul> </li> </ul> Tableau des R\u00e8gles de Gestion R\u00e8gle ID Description de la R\u00e8gle Conditions Actions RG-009 Une ressource ne peut \u00eatre allou\u00e9e qu'\u00e0 un seul projet \u00e0 la fois. Lors de l'allocation des ressources. V\u00e9rifier la disponibilit\u00e9 avant l'allocation. RG-010 Les ressources doivent \u00eatre enregistr\u00e9es avec des d\u00e9tails complets. Lors de l'ajout des ressources. Obliger la saisie des informations (type, quantit\u00e9, etc.). RG-011 Les rapports d'utilisation doivent \u00eatre g\u00e9n\u00e9r\u00e9s mensuellement. G\u00e9n\u00e9ration des rapports. Automatiser la cr\u00e9ation et la distribution des rapports. RG-012 Seuls les administrateurs peuvent ajouter ou supprimer des ressources. Contr\u00f4le d'acc\u00e8s. Restreindre la gestion des ressources aux administrateurs. 4. Gestion des Comptes Fonctionnalit\u00e9s <ul> <li> <p>Inscription et Authentification des Utilisateurs</p> <ul> <li>Description : Permettre aux utilisateurs de s'inscrire et de se connecter \u00e0  la plateforme.</li> <li>Actions :  <ul> <li>Cr\u00e9er un compte avec les informations personnelles.</li> <li>S'authentifier avec un nom d'utilisateur et un mot de passe.</li> </ul> </li> </ul> </li> <li> <p>Gestion des R\u00f4les et Permissions</p> <ul> <li>Description : Assurer que chaque utilisateur a les permissions appropri\u00e9es  selon son r\u00f4le.</li> <li>Actions :  <ul> <li>Attribuer des r\u00f4les (Administrateur, Enseignant, \u00c9tudiant).</li> <li>D\u00e9finir des permissions sp\u00e9cifiques pour chaque r\u00f4le.</li> </ul> </li> </ul> </li> <li> <p>Gestion des Profils Utilisateurs</p> <ul> <li>Description : Permettre aux utilisateurs de g\u00e9rer leurs profils.</li> <li>Actions :  <ul> <li>Modifier les informations du profil.</li> <li>R\u00e9initialiser le mot de passe.</li> <li>Mettre \u00e0 jour les pr\u00e9f\u00e9rences de notification.</li> </ul> </li> </ul> </li> </ul> Tableau des R\u00e8gles de Gestion R\u00e8gle ID Description de la R\u00e8gle Conditions Actions RG-013 Les mots de passe doivent respecter une politique de s\u00e9curit\u00e9. Lors de la cr\u00e9ation ou modification du mot de passe. Exiger des r\u00e8gles de complexit\u00e9 (longueur, caract\u00e8res sp\u00e9ciaux, etc.). RG-014 Les utilisateurs doivent confirmer leur email lors de l'inscription. Lors de l'inscription. Envoyer un email de confirmation et v\u00e9rifier avant d'activer le compte. RG-015 Seuls les administrateurs peuvent attribuer ou modifier les r\u00f4les. Gestion des r\u00f4les. Restreindre l'acc\u00e8s \u00e0 la gestion des r\u00f4les aux administrateurs. RG-016 Les sessions utilisateurs doivent expirer apr\u00e8s une p\u00e9riode d'inactivit\u00e9. S\u00e9curit\u00e9 des sessions. Configurer l'expiration automatique des sessions. RG-017 Les crit\u00e8res d'\u00e9valuation des projets doivent \u00eatre d\u00e9finis \u00e0 la cr\u00e9ation. Configuration du projet. Exiger une grille d'\u00e9valuation avant l'activation du projet. RG-018 Les notes finales doivent \u00eatre approuv\u00e9es par au moins deux enseignants. Soumission des notes. Bloquer la finalisation des notes jusqu'\u00e0 une deuxi\u00e8me approbation. RG-019 Les \u00e9tudiants peuvent faire appel des notes dans un d\u00e9lai de 5 jours. Publication des notes. Activer une fen\u00eatre d'appel avec un syst\u00e8me de notification. RG-020 Les \u00e9quipes doivent avoir entre 2 et 6 membres. Formation des \u00e9quipes. Valider la taille de l'\u00e9quipe lors de la cr\u00e9ation et des modifications. RG-021 Les \u00e9tudiants ne peuvent \u00eatre que dans une seule \u00e9quipe par projet. Assignation des \u00e9quipes. V\u00e9rifier les appartenances existantes avant d'ajouter \u00e0 une \u00e9quipe. RG-022 Les chefs d'\u00e9quipe doivent \u00eatre \u00e9lus par les membres de l'\u00e9quipe. Configuration de l'\u00e9quipe. Exiger un vote majoritaire pour la s\u00e9lection du chef d'\u00e9quipe. RG-023 Les soumissions de projet doivent \u00eatre dans des formats approuv\u00e9s. T\u00e9l\u00e9chargement des fichiers. Valider les types de fichiers par rapport \u00e0 une liste blanche. RG-024 Limite de taille des fichiers de 100MB par soumission. Validation des t\u00e9l\u00e9chargements. Appliquer une limite de taille avec une option de compression. RG-025 Conserver l'historique des versions des fichiers pendant 30 jours. Gestion du stockage. Mettre en \u0153uvre un syst\u00e8me de contr\u00f4le de version. RG-026 Avertissement des \u00e9ch\u00e9ances critiques 48 heures \u00e0 l'avance. Suivi du temps. Envoyer des rappels automatis\u00e9s. RG-027 Les membres de l'\u00e9quipe sont notifi\u00e9s de tous les changements de statut des t\u00e2ches. Mises \u00e0 jour des t\u00e2ches. Envoyer des notifications aux utilisateurs concern\u00e9s. RG-028 Rapports d'avancement hebdomadaires aux enseignants. Rapports. G\u00e9n\u00e9rer et envoyer des rapports automatis\u00e9s. 5. Planning des Sprints Sprint Dates Objectifs User Stories R\u00e8gles de Gestion Sprint 1 17/12/2024 - 31/12/2024 <ul> <li>Mise en place initiale</li> <li>Authentification et utilisateurs</li> <li>Base de donn\u00e9es</li> </ul> <ul> <li>Configuration Spring Boot/Security</li> <li>CRUD Utilisateurs</li> <li>Gestion des r\u00f4les</li> </ul> RG-013, RG-014, RG-015, RG-016 Sprint 2 01/01/2025 - 14/01/2025 <ul> <li>Gestion des projets</li> <li>Gestion des \u00e9quipes</li> <li>Crit\u00e8res d'\u00e9valuation</li> </ul> <ul> <li>CRUD Projets</li> <li>CRUD \u00c9quipes</li> <li>Configuration de l'\u00e9valuation</li> </ul> RG-001, RG-002, RG-003, RG-004, RG-017, RG-020, RG-021 Sprint 3 15/01/2025 - 29/01/2025 <ul> <li>Gestion des t\u00e2ches</li> <li>Notifications</li> <li>Rapports</li> </ul> <ul> <li>CRUD T\u00e2ches</li> <li>Syst\u00e8me de notifications</li> <li>Rapports hebdomadaires</li> </ul> RG-005, RG-006, RG-007, RG-008, RG-026, RG-027, RG-028 6. Architecture du Syst\u00e8me   C4Context  title Diagramme de Contexte du Syst\u00e8me - ProjectHub    Person_Ext(student, \"\u00c9tudiant\", \"Participe aux projets\")  Person_Ext(teacher, \"Enseignant\", \"G\u00e8re projets et \u00e9valuations\")  Person_Ext(admin, \"Administrateur\", \"Administration syst\u00e8me\")    System(projecthub, \"ProjectHub\", \"Plateforme de Gestion de Projets \u00c9ducatifs\")    System_Ext(mailSystem, \"Syst\u00e8me Email\", \"Notifications\")  System_Ext(storageSystem, \"Stockage\", \"Gestion fichiers\")  System_Ext(csvSystem, \"Import/Export\", \"Gestion CSV\")    Rel(student, projecthub, \"Consulte les projets, soumet son travail\")  Rel(teacher, projecthub, \"Cr\u00e9e et g\u00e8re les projets, \u00e9value\")  Rel(admin, projecthub, \"Administre les utilisateurs et les ressources\")    Rel(projecthub, mailSystem, \"Envoie des notifications\")  Rel(projecthub, storageSystem, \"Stocke les fichiers\")  Rel(projecthub, csvSystem, \"Importe et exporte les donn\u00e9es\")   7. Gestion des Risques   %%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#FFCC00', 'edgeLabelBackground':  '#ffffee', 'secondaryColor': '#F8F8F8', 'tertiaryColor': '#B3B3B3', 'primaryTextColor': '#000000',  'lineColor': '#333333'}}}%%  quadrantChart  title Matrice des Risques  x-axis Impact  y-axis Probability  quadrant-1 Monitoring  quadrant-2 Major Risks  quadrant-3 Minor Risks  quadrant-4 Attention  \"Data Loss\": [0.8, 0.9]  \"Security Breach\": [0.9, 0.7]  \"Performance\": [0.6, 0.5]  \"Downtime\": [0.4, 0.8]  \"Integration\": [0.5, 0.4]  \"Adoption\": [0.7, 0.6]   Strat\u00e9gies de Mitigation <p>  Pour chaque risque identifi\u00e9, nous avons d\u00e9fini des strat\u00e9gies de mitigation appropri\u00e9es afin de r\u00e9duire  l'impact potentiel sur le projet.  </p> Tableau des Risques Risque Impact Probabilit\u00e9 Mitigation Perte de donn\u00e9es Critique Moyenne <ul> <li>Sauvegardes automatiques quotidiennes</li> <li>R\u00e9plication des donn\u00e9es</li> <li>Validation des sauvegardes</li> </ul> Faille de s\u00e9curit\u00e9 Critique Faible <ul> <li>Audits r\u00e9guliers</li> <li>Tests de p\u00e9n\u00e9tration</li> <li>Chiffrement des donn\u00e9es sensibles</li> </ul> Performance Mod\u00e9r\u00e9 Moyenne <ul> <li>Surveillance continue</li> <li>Tests de charge</li> <li>Optimisation du code</li> </ul> Indisponibilit\u00e9 \u00c9lev\u00e9 Faible <ul> <li>Architecture hautement disponible</li> <li>Plan de reprise d'activit\u00e9</li> <li>Surveillance 24h/24 et 7j/7</li> </ul> Int\u00e9gration Mod\u00e9r\u00e9 Moyenne <ul> <li>Tests d'int\u00e9gration automatis\u00e9s</li> <li>Documentation d\u00e9taill\u00e9e</li> <li>Environnement de staging</li> </ul> Adoption \u00c9lev\u00e9 Moyenne <ul> <li>Formation des utilisateurs</li> <li>Support r\u00e9actif</li> <li>Feedback continu</li> </ul> Conclusion <p>  Voil\u00e0, ce cahier des charges vous donne les grandes lignes de ProjectHub. En g\u00e9rant  efficacement les projets, les t\u00e2ches, les ressources et les comptes, nous voulons que cette plateforme  soit un outil facile \u00e0 utiliser et s\u00e9curis\u00e9 pour tout le monde.  </p> <p> Ce document est susceptible d'\u00eatre mis \u00e0 jour et ajust\u00e9 en fonction de l'\u00e9volution du projet et de  vos retours. </p>"},{"location":"pages/docs/reference/changelog/","title":"Changelog","text":""},{"location":"pages/docs/reference/changelog/#unreleased","title":"[Unreleased]","text":"<ul> <li>Initial draft of project documentation created.</li> </ul>"},{"location":"pages/docs/reference/changelog/#100-2024-10-01","title":"[1.0.0] - 2024-10-01","text":""},{"location":"pages/docs/reference/changelog/#added","title":"Added","text":"<ul> <li>Introduction section detailing the purpose and significance of the project.</li> <li>Objectives section highlighting key goals to be achieved.</li> <li>Project Scope section defining what is included and excluded from the project.</li> <li>Project Management section discussing strategies and methodologies.</li> <li>Task Management section outlining processes for task creation, assignment, and tracking.</li> <li>Resource Management section describing resource management throughout the project lifecycle.</li> <li>User Management section explaining registration, roles, and permissions.</li> <li>Sprints section detailing planning and execution processes.</li> <li>Architecture section providing an overview of the system architecture.</li> <li>Risk Management section outlining strategies for risk identification, assessment, and mitigation.</li> <li>Conclusion section summarizing key points and final thoughts.</li> <li>Cover page for documentation including project title and relevant details.</li> <li>Index page linking to all sections for easy navigation.</li> </ul>"},{"location":"pages/docs/reference/changelog/#changed","title":"Changed","text":"<ul> <li>Updated formatting and structure for consistency across all sections.</li> </ul>"},{"location":"pages/docs/reference/changelog/#removed","title":"Removed","text":"<ul> <li>No sections removed in this version. </li> </ul>"},{"location":"pages/docs/reference/changelog/#101-2024-10-15","title":"[1.0.1] - 2024-10-15","text":""},{"location":"pages/docs/reference/changelog/#changed_1","title":"Changed","text":"<ul> <li>Minor edits for clarity and conciseness in the introduction and objectives sections.</li> <li>Adjusted the layout of the risk management section for better readability.</li> </ul>"},{"location":"pages/docs/reference/changelog/#added_1","title":"Added","text":"<ul> <li>Additional diagrams and tables to enhance understanding of project management strategies.</li> </ul>"},{"location":"pages/docs/reference/cover/","title":"Project Title: ProjectHub","text":""},{"location":"pages/docs/reference/cover/#cover-page","title":"Cover Page","text":"<p>ProjectHub A Comprehensive Platform for Student Project Management</p> <p>Version: 1.0 Date: 27/12/2024  Authors: BILAL EL KHATABI  Contact Information: github.com/bilalobe Copyright MIT</p> <p>Abstract: ProjectHub is designed to streamline the management of student projects, facilitating efficient task allocation, resource management, and user interactions. This documentation outlines the project's objectives, scope, management strategies, and risk assessments, providing a comprehensive guide for stakeholders involved in the development and implementation of the platform.</p> <p>Table of Contents: 1. Introduction 2. Objectives 3. Project Scope 4. Project Management 5. Task Management 6. Resource Management 7. User Management 8. Sprints 9. Architecture 10. Risk Management 11. Conclusion  </p> <p>Disclaimer: This document is subject to updates and revisions based on project developments and stakeholder feedback.</p>"},{"location":"pages/docs/sections/architecture/","title":"Architecture Overview","text":""},{"location":"pages/docs/sections/architecture/#system-architecture","title":"System Architecture","text":"<p>The architecture of the ProjectHub system is designed to support a robust and scalable platform for managing educational projects. The system is built using a microservices architecture, which allows for independent deployment and scaling of different components.</p>"},{"location":"pages/docs/sections/architecture/#key-components","title":"Key Components","text":"<ol> <li>User Management Service: Handles user registration, authentication, and role-based access control.</li> <li>Project Management Service: Manages project creation, updates, and tracking of project statuses.</li> <li>Task Management Service: Facilitates the creation, assignment, and tracking of tasks associated with projects.</li> <li>Resource Management Service: Oversees the allocation and management of resources required for projects.</li> <li>Notification Service: Sends notifications to users regarding project updates, task assignments, and deadlines.</li> </ol>"},{"location":"pages/docs/sections/architecture/#technology-stack","title":"Technology Stack","text":"<ul> <li>Frontend: JavaFX for building the user interface.</li> <li>Backend: Spring Boot for developing microservices.</li> <li>Database: PostgreSQL for data storage and management.</li> <li>Messaging: RabbitMQ for inter-service communication.</li> </ul>"},{"location":"pages/docs/sections/architecture/#diagrams","title":"Diagrams","text":""},{"location":"pages/docs/sections/architecture/#system-context-diagram","title":"System Context Diagram","text":"<pre><code>C4Context\n    title System Context diagram for ProjectHub\n\n    Person(student, \"Student\", \"A student user who can view and manage their projects\")\n    Person(teacher, \"Teacher\", \"A teacher who manages student projects and evaluations\") \n    Person(admin, \"Administrator\", \"System administrator who manages users and settings\")\n\n    System(projecthub, \"ProjectHub System\", \"Allows users to manage student projects, evaluations and resources\")\n\n    System_Ext(db, \"PostgreSQL Database\", \"Stores user, project and evaluation data\")\n    System_Ext(auth, \"Authentication Service\", \"Handles user authentication and authorization\")\n    System_Ext(mq, \"RabbitMQ\", \"Message broker for async communications\")\n\n    Rel(student, projecthub, \"Views projects, submits work, tracks progress\")\n    Rel(teacher, projecthub, \"Creates/evaluates projects, manages teams\")\n    Rel(admin, projecthub, \"Configures system, manages users\")\n\n    Rel(projecthub, db, \"Reads from and writes to\")\n    Rel(projecthub, auth, \"Authenticates users via\")\n    Rel(projecthub, mq, \"Publishes/subscribes to messages\")\n</code></pre>"},{"location":"pages/docs/sections/architecture/#risk-matrix-diagram","title":"Risk Matrix Diagram","text":"<pre><code>quadrantChart\n    title Risk Assessment Matrix\n    x-axis Low Impact --&gt; High Impact\n    y-axis Low Probability --&gt; High Probability\n    quadrant-1 Critical Risk\n    quadrant-2 High Risk\n    quadrant-3 Medium Risk\n    quadrant-4 Low Risk\n    Data-Loss: [0.8, 0.6]\n    System-Downtime: [0.6, 0.5]\n    Security-Breach: [0.9, 0.8]\n    Performance-Issues: [0.4, 0.3]\n    Integration-Failures: [0.3, 0.2]\n</code></pre>"},{"location":"pages/docs/sections/architecture/#conclusion","title":"Conclusion","text":"<p>The architecture of ProjectHub is designed to ensure flexibility, scalability, and maintainability, enabling efficient management of educational projects and resources.</p>"},{"location":"pages/docs/sections/conclusion/","title":"Conclusion","text":"<p>In conclusion, this documentation has outlined the essential components and strategies for the successful implementation of the ProjectHub platform. We have explored the project's objectives, scope, and management methodologies, as well as the processes for task, resource, and user management.</p> <p>The architecture of the system has been detailed, providing insights into its design and functionality. Additionally, we have identified potential risks and established mitigation strategies to ensure the project's resilience.</p> <p>As we move forward, it is crucial to maintain a focus on the defined goals and to adapt to any challenges that may arise. Continuous feedback and iterative improvements will be key to delivering a robust and user-friendly platform that meets the needs of students and educators alike.</p> <p>This document will be updated as necessary to reflect any changes or enhancements to the ProjectHub platform, ensuring that all stakeholders are informed and aligned with the project's progress. Thank you for your attention and commitment to making ProjectHub a success.</p>"},{"location":"pages/docs/sections/introduction/","title":"Introduction to ProjectHub","text":""},{"location":"pages/docs/sections/introduction/#overview","title":"Overview","text":"<p>ProjectHub is a comprehensive platform designed for managing student projects, evaluating components, and distributing projects. Built using JavaFX, Spring Boot, and PostgreSQL, it aims to simplify and optimize the workflow for both students and educators.</p>"},{"location":"pages/docs/sections/introduction/#purpose","title":"Purpose","text":"<p>The primary purpose of ProjectHub is to facilitate effective project management in educational settings. By providing intuitive tools for project creation, task assignment, and resource management, ProjectHub enhances collaboration and productivity among students and teachers.</p>"},{"location":"pages/docs/sections/introduction/#significance","title":"Significance","text":"<p>In an increasingly digital world, the ability to manage projects efficiently is crucial for academic success. ProjectHub not only streamlines project workflows but also ensures that all stakeholders have access to the necessary resources and information, fostering a collaborative learning environment. </p> <p>This document serves as a foundational guide to understanding the objectives, scope, and management strategies of ProjectHub, ensuring that all participants are aligned with the project's goals and methodologies.</p>"},{"location":"pages/docs/sections/objectives/","title":"Objectives","text":"<p>The primary objectives of the ProjectHub platform are as follows:</p> <ol> <li> <p>Facilitate Project Management: Provide intuitive tools for creating, editing, and supervising student projects to enhance the overall management experience.</p> </li> <li> <p>Optimize Task Management: Enable efficient task distribution and precise tracking of activities to ensure timely completion of project milestones.</p> </li> <li> <p>Resource Management: Ensure effective allocation and optimal utilization of resources available for projects, thereby maximizing productivity.</p> </li> <li> <p>User Account Management: Implement robust user account management with role-based access controls to maintain security and confidentiality of data.</p> </li> <li> <p>Enhance Collaboration: Foster collaboration among students, teachers, and administrators through streamlined communication and resource sharing.</p> </li> <li> <p>Support Evaluation Processes: Establish clear criteria for project evaluation to ensure fair and consistent assessment of student work.</p> </li> <li> <p>Continuous Improvement: Gather feedback from users to continuously improve the platform and adapt to evolving educational needs.</p> </li> </ol> <p>By achieving these objectives, ProjectHub aims to create a comprehensive and user-friendly environment for managing educational projects effectively.</p>"},{"location":"pages/docs/sections/project-scope/","title":"Project Scope","text":""},{"location":"pages/docs/sections/project-scope/#overview","title":"Overview","text":"<p>The ProjectHub platform is designed to facilitate the management of student projects, providing tools for project creation, task assignment, resource allocation, and user management. This document outlines the scope of the ProjectHub project, detailing what is included and excluded from the project.</p>"},{"location":"pages/docs/sections/project-scope/#included-in-the-project","title":"Included in the Project","text":""},{"location":"pages/docs/sections/project-scope/#project-management","title":"Project Management","text":"<ul> <li>Development of features for creating, editing, and deleting projects</li> <li>Implementation of project listing and detail viewing functionalities</li> </ul>"},{"location":"pages/docs/sections/project-scope/#task-management","title":"Task Management","text":"<ul> <li>Creation and assignment of tasks to team members</li> <li>Tracking task progress and status updates</li> </ul>"},{"location":"pages/docs/sections/project-scope/#resource-management","title":"Resource Management","text":"<ul> <li>Management of resources required for projects, including materials and tools</li> <li>Allocation and tracking of resource usage</li> </ul>"},{"location":"pages/docs/sections/project-scope/#user-management","title":"User Management","text":"<ul> <li>User registration and authentication processes</li> <li>Role-based access control for different user types:<ul> <li>Students</li> <li>Teachers</li> <li>Administrators</li> </ul> </li> </ul>"},{"location":"pages/docs/sections/project-scope/#sprint-planning","title":"Sprint Planning","text":"<ul> <li>Definition and execution of sprints for iterative project development</li> <li>Regular reviews and adjustments based on sprint outcomes</li> </ul>"},{"location":"pages/docs/sections/project-scope/#risk-management","title":"Risk Management","text":"<ul> <li>Identification and assessment of potential risks associated with the project</li> <li>Development of mitigation strategies to address identified risks</li> </ul>"},{"location":"pages/docs/sections/project-scope/#excluded-from-the-project","title":"Excluded from the Project","text":""},{"location":"pages/docs/sections/project-scope/#third-party-integrations","title":"Third-Party Integrations","text":"<ul> <li>Integration with external systems or platforms not specified in the project requirements</li> </ul>"},{"location":"pages/docs/sections/project-scope/#advanced-analytics","title":"Advanced Analytics","text":"<ul> <li>Development of complex analytics or reporting features beyond basic project and task tracking</li> </ul>"},{"location":"pages/docs/sections/project-scope/#mobile-application","title":"Mobile Application","text":"<ul> <li>Creation of a mobile version of the ProjectHub platform is not included in the current scope</li> </ul>"},{"location":"pages/docs/sections/project-scope/#custom-user-interfaces","title":"Custom User Interfaces","text":"<ul> <li>Development of highly customized user interfaces beyond the standard templates provided</li> </ul>"},{"location":"pages/docs/sections/project-scope/#conclusion","title":"Conclusion","text":"<p>The scope of the ProjectHub project is focused on delivering essential functionalities for project management, task tracking, resource allocation, and user management. By clearly defining what is included and excluded, the project aims to maintain a clear direction and ensure successful delivery within the specified timeline.</p>"},{"location":"pages/docs/sections/project/","title":"Project Management","text":""},{"location":"pages/docs/sections/project/#overview","title":"Overview","text":"<p>ProjectHub provides comprehensive project management capabilities for educational institutions. This guide explains core concepts and workflows.</p>"},{"location":"pages/docs/sections/project/#project-lifecycle","title":"Project Lifecycle","text":"<ol> <li>Creation</li> <li>Planning</li> <li>Execution</li> <li>Monitoring</li> <li>Closure</li> </ol>"},{"location":"pages/docs/sections/project/#project-components","title":"Project Components","text":""},{"location":"pages/docs/sections/project/#core-elements","title":"Core Elements","text":"<ul> <li>Project Details</li> <li>Team Members</li> <li>Tasks</li> <li>Resources</li> <li>Timeline</li> <li>Deliverables</li> </ul>"},{"location":"pages/docs/sections/project/#project-roles","title":"Project Roles","text":"Role Responsibilities Access Level Project Manager Overall project management Full Team Lead Team coordination High Developer Implementation Medium Reviewer Quality assurance Medium"},{"location":"pages/docs/sections/project/#project-workflow","title":"Project Workflow","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Draft\n    Draft --&gt; InReview\n    InReview --&gt; Active\n    Active --&gt; Completed\n    Active --&gt; OnHold\n    OnHold --&gt; Active\n    Completed --&gt; [*]\n</code></pre>"},{"location":"pages/docs/sections/project/#best-practices","title":"Best Practices","text":"<p>Project Management Tips</p> <ul> <li>Define clear objectives</li> <li>Set realistic timelines</li> <li>Assign clear responsibilities</li> <li>Track progress regularly</li> <li>Document decisions</li> <li>Maintain communication</li> </ul>"},{"location":"pages/docs/sections/project/#related-resources","title":"Related Resources","text":"<ul> <li>Task Management</li> <li>Resource Management</li> <li>Team Management</li> </ul>"},{"location":"pages/docs/sections/resource/","title":"Resource Management","text":""},{"location":"pages/docs/sections/resource/#overview","title":"Overview","text":"<p>Resource management is a critical aspect of project management that involves planning, allocating, and monitoring resources to ensure project success. This section outlines the strategies and processes for effectively managing resources throughout the lifecycle of the project.</p>"},{"location":"pages/docs/sections/resource/#resource-types","title":"Resource Types","text":"<ol> <li> <p>Human Resources: This includes all team members involved in the project, such as developers, designers, and project managers. Proper allocation of tasks based on skills and availability is essential.</p> </li> <li> <p>Physical Resources: These are tangible assets required for the project, such as hardware, office space, and equipment. Ensuring that these resources are available when needed is crucial for maintaining project timelines.</p> </li> <li> <p>Financial Resources: Budgeting and financial planning are vital to ensure that the project has sufficient funds to cover all expenses. Regular monitoring of expenditures against the budget is necessary to avoid overruns.</p> </li> <li> <p>Technological Resources: This includes software tools, platforms, and technologies that support project execution. Keeping these resources updated and ensuring team members are trained to use them effectively is important.</p> </li> </ol>"},{"location":"pages/docs/sections/resource/#resource-allocation","title":"Resource Allocation","text":"<ul> <li> <p>Planning: At the beginning of the project, a resource allocation plan should be developed, detailing how resources will be distributed across various tasks and phases.</p> </li> <li> <p>Monitoring: Regular check-ins and updates on resource usage should be conducted to ensure that resources are being utilized efficiently and effectively.</p> </li> <li> <p>Adjustments: Be prepared to reallocate resources as necessary based on project needs, team performance, and unforeseen challenges.</p> </li> </ul>"},{"location":"pages/docs/sections/resource/#tools-and-techniques","title":"Tools and Techniques","text":"<ul> <li> <p>Resource Management Software: Utilize tools that help track resource allocation, availability, and performance metrics.</p> </li> <li> <p>Regular Meetings: Conduct team meetings to discuss resource needs, challenges, and adjustments to the resource plan.</p> </li> <li> <p>Documentation: Maintain clear documentation of resource allocation decisions and changes to ensure transparency and accountability.</p> </li> </ul>"},{"location":"pages/docs/sections/resource/#conclusion","title":"Conclusion","text":"<p>Effective resource management is essential for the success of any project. By planning, monitoring, and adjusting resource allocation, project managers can ensure that all necessary resources are available and utilized efficiently, leading to successful project outcomes.</p>"},{"location":"pages/docs/sections/risk/","title":"Risk Management","text":""},{"location":"pages/docs/sections/risk/#introduction","title":"Introduction","text":"<p>Risk management is a critical component of project management that involves identifying, assessing, and mitigating risks that could potentially impact the project's success. This section outlines the strategies and processes that will be employed to manage risks throughout the lifecycle of the ProjectHub platform.</p>"},{"location":"pages/docs/sections/risk/#risk-identification","title":"Risk Identification","text":"<p>The first step in risk management is to identify potential risks that may affect the project. This includes:</p> <ul> <li>Technical Risks: Issues related to technology, such as software bugs, integration challenges, or hardware failures.</li> <li>Operational Risks: Risks arising from internal processes, including resource allocation and task management inefficiencies.</li> <li>Financial Risks: Budget overruns, funding shortages, or unexpected costs that could impact project viability.</li> <li>Compliance Risks: Legal and regulatory requirements that must be adhered to, which may change during the project lifecycle.</li> <li>Market Risks: Changes in market conditions or user expectations that could affect project outcomes.</li> </ul>"},{"location":"pages/docs/sections/risk/#risk-assessment","title":"Risk Assessment","text":"<p>Once risks are identified, they must be assessed to determine their potential impact and likelihood. This involves:</p> <ul> <li>Impact Analysis: Evaluating the potential consequences of each risk on project objectives, timelines, and resources.</li> <li>Probability Assessment: Estimating the likelihood of each risk occurring based on historical data and expert judgment.</li> <li>Risk Matrix: Utilizing a risk matrix to categorize risks based on their impact and probability, helping prioritize which risks require immediate attention.</li> </ul>"},{"location":"pages/docs/sections/risk/#risk-mitigation-strategies","title":"Risk Mitigation Strategies","text":"<p>For each identified risk, mitigation strategies will be developed to minimize their impact. These strategies may include:</p> <ul> <li>Avoidance: Altering project plans to eliminate the risk entirely.</li> <li>Reduction: Implementing measures to reduce the likelihood or impact of the risk.</li> <li>Transfer: Shifting the risk to a third party, such as through insurance or outsourcing.</li> <li>Acceptance: Acknowledging the risk and preparing to manage its consequences if it occurs.</li> </ul>"},{"location":"pages/docs/sections/risk/#monitoring-and-review","title":"Monitoring and Review","text":"<p>Risk management is an ongoing process that requires continuous monitoring and review. This includes:</p> <ul> <li>Regular Risk Assessments: Conducting periodic reviews of identified risks and assessing new risks as the project progresses.</li> <li>Stakeholder Communication: Keeping all stakeholders informed about risks and mitigation strategies to ensure transparency and collaboration.</li> <li>Documentation: Maintaining detailed records of identified risks, assessments, and mitigation actions to facilitate learning and improvement in future projects.</li> </ul>"},{"location":"pages/docs/sections/risk/#conclusion","title":"Conclusion","text":"<p>Effective risk management is essential for the success of the ProjectHub platform. By proactively identifying, assessing, and mitigating risks, the project team can enhance the likelihood of achieving project objectives and delivering value to users.</p>"},{"location":"pages/docs/sections/sprints/","title":"Sprint Planning","text":""},{"location":"pages/docs/sections/sprints/#overview","title":"Overview","text":"<p>Project development is organized into 3 sprints, each focusing on specific features and functionalities.</p>"},{"location":"pages/docs/sections/sprints/#sprint-schedule","title":"Sprint Schedule","text":"Sprint Dates Objectives User Stories Rules Sprint 1 17/12/2024 - 31/12/2024 - Initial setup- Authentication- Database - Spring Boot/Security config- User CRUD- Role management RG-013, RG-014, RG-015, RG-016 Sprint 2 01/01/2025 - 14/01/2025 - Project management- Team management- Evaluation criteria - Project CRUD- Team CRUD- Evaluation setup RG-001, RG-002, RG-003, RG-004, RG-017, RG-020, RG-021 Sprint 3 15/01/2025 - 29/01/2025 - Task management- Notifications- Reports - Task CRUD- Notification system- Weekly reports RG-005, RG-006, RG-007, RG-008, RG-026, RG-027, RG-028"},{"location":"pages/docs/sections/sprints/#progress-tracking","title":"Progress Tracking","text":"<pre><code>gantt\n    title Project Timeline\n    dateFormat DD-MM-YYYY\n\n    section Sprint 1\n    Initial Setup        :17-12-2024, 7d\n    Authentication      :24-12-2024, 7d\n\n    section Sprint 2\n    Project Management  :01-01-2025, 7d\n    Team Management    :08-01-2025, 7d\n\n    section Sprint 3\n    Task Management    :15-01-2025, 7d\n    Notifications     :22-01-2025, 7d\n</code></pre>"},{"location":"pages/docs/sections/task/","title":"Task Management","text":""},{"location":"pages/docs/sections/task/#overview","title":"Overview","text":"<p>Task management is a critical component of the ProjectHub platform, ensuring that all tasks are effectively created, assigned, and tracked throughout the project lifecycle. This section outlines the processes and methodologies that will be employed to manage tasks efficiently.</p>"},{"location":"pages/docs/sections/task/#task-creation","title":"Task Creation","text":"<p>Tasks will be created by project managers or team leads through a user-friendly interface. Each task will include the following details:</p> <ul> <li>Title: A brief description of the task.</li> <li>Description: A detailed explanation of the task requirements.</li> <li>Priority: The urgency of the task (High, Medium, Low).</li> <li>Deadline: The due date for task completion.</li> <li>Assigned To: The team member responsible for the task.</li> </ul>"},{"location":"pages/docs/sections/task/#task-assignment","title":"Task Assignment","text":"<p>Once a task is created, it will be assigned to a specific team member based on their skills and availability. The assignment process will include:</p> <ul> <li>Selection of Team Member: Project managers will select the most suitable team member for the task.</li> <li>Notification: The assigned team member will receive a notification via email and in-app alerts regarding the new task assignment.</li> </ul>"},{"location":"pages/docs/sections/task/#task-tracking","title":"Task Tracking","text":"<p>To ensure that tasks are completed on time, a tracking system will be implemented. This will include:</p> <ul> <li>Status Updates: Team members will be required to update the status of their tasks regularly (e.g., Not Started, In Progress, Completed).</li> <li>Progress Monitoring: Project managers will have access to dashboards that display the progress of all tasks, allowing for timely interventions if necessary.</li> <li>Reporting: Weekly reports will be generated to summarize task completion rates and any outstanding tasks.</li> </ul>"},{"location":"pages/docs/sections/task/#conclusion","title":"Conclusion","text":"<p>Effective task management is essential for the success of the ProjectHub platform. By implementing structured processes for task creation, assignment, and tracking, we aim to enhance productivity and ensure that project goals are met efficiently.</p>"},{"location":"pages/docs/tables/rules/","title":"Project Rules","text":""},{"location":"pages/docs/tables/rules/#access-control-rules","title":"Access Control Rules","text":"Rule ID Description Roles RG-001 Only administrators can create/modify user roles ADMIN RG-002 Teachers can create and manage projects TEACHER RG-003 Students can only view assigned projects STUDENT RG-004 Team leaders can assign tasks to team members TEAM_LEAD"},{"location":"pages/docs/tables/rules/#project-management-rules","title":"Project Management Rules","text":"Rule ID Description Priority RG-010 Projects must have defined objectives HIGH RG-011 Tasks must be assigned to team members HIGH RG-012 Progress updates required weekly MEDIUM RG-013 Resource allocation must be documented MEDIUM"},{"location":"pages/docs/tables/rules/#technical-requirements","title":"Technical Requirements","text":"Rule ID Description Category RG-020 Use Spring Boot 3.x Backend RG-021 Use JavaFX for UI Frontend RG-022 PostgreSQL for database Database RG-023 Implement JWT authentication Security"},{"location":"pages/docs/tables/rules/#evaluation-criteria","title":"Evaluation Criteria","text":"Rule ID Description Weight RG-030 Code quality and organization 30% RG-031 Feature completeness 25% RG-032 Documentation quality 25% RG-033 UI/UX design 20% <p>Rule Updates</p> <p>Rules may be updated throughout the project lifecycle. Check changelog for updates.</p>"}]}